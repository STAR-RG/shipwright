[
  {
    "raw_dockerfile": "FROM ARG_FROM\n\nADD bin/ARG_BIN-ARG_ARCH /ARG_BIN\n\nUSER nobody:nobody\nENTRYPOINT [\"/ARG_BIN\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  640.5kB\r\r\nStep 1/4 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/Meetic/blackbeard",
    "repo_commit": "3f1ff265443e6c32c08df4a4764a8dfab03ed771",
    "repo_id": 112760951
  },
  {
    "raw_dockerfile": "# Build Debian package using dh-virtualenv\n\nFROM #DIST_ID#:#CODENAME# AS dpkg-build\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update -qq && apt-get install -yqq \\\n        build-essential debhelper devscripts equivs dh-virtualenv \\\n        curl tar gzip lsb-release apt-utils apt-transport-https libparse-debianchangelog-perl \\\n        python3 python3-setuptools python3-pip python3-dev libffi-dev \\\n        libxml2-dev libxslt1-dev libyaml-dev libjpeg-dev \\\n        libssl-dev libncurses5-dev libncursesw5-dev libzmq3-dev \\\n    && ( curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - ) \\\n    && echo 'deb https://deb.nodesource.com/#NODEREPO# #CODENAME# main' \\\n            >/etc/apt/sources.list.d/nodesource.list \\\n    && apt-get update -qq && apt-get install -y nodejs \\\n    && rm -rf \"/var/lib/apt/lists\"/*\nWORKDIR /dpkg-build\nCOPY ./ ./\nRUN dpkg-buildpackage -us -uc -b && mkdir -p /dpkg && cp -pl /#PKGNAME#[-_]* /dpkg\n# RUN pwd && dh_virtualenv --version && ls -la && du -sch . ##UUID#",
    "raw_stdout_log": "Sending build context to Docker daemon  232.4kB\r\r\nStep 1/6 : FROM #DIST_ID#:#CODENAME# AS dpkg-build",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/spotify/dh-virtualenv",
    "repo_commit": "9f4e66fc2e00024126e198b3b3ad58e1c89b6168",
    "repo_id": 13451234
  },
  {
    "raw_dockerfile": "FROM Fedora-Docker-Base-23-20151030.x86_64\nMAINTAINER Hamish.K.Mackenzie@gmail.com\n\nRUN dnf -y install sudo && dnf clean all\n\nENV WINE wine\nENV WINEDEBUG -all\nENV WINEPATH_U winepath -u\n\nRUN sudo dnf -y --enablerepo updates-testing update && \\\n    sudo dnf clean all\n\nRUN sudo dnf -y --enablerepo updates-testing install \\\n                           wine.x86_64 \\\n                           wine.i686 \\\n                           mingw64-gtksourceview3.noarch \\\n                           mingw32-winpthreads \\\n                           mingw64-enchant \\\n                           mingw64-libsoup \\\n                           mingw64-libidn \\\n                           mingw64-sqlite \\\n                           mingw64-gstreamer1-plugins-base \\\n                           mingw64-libwebp \\\n                           mingw64-libxslt \\\n                           mingw32-enchant \\\n                           mingw32-libsoup \\\n                           mingw32-libidn \\\n                           mingw32-sqlite \\\n                           mingw32-gstreamer1-plugins-base \\\n                           mingw32-libwebp \\\n                           mingw32-libxslt \\\n                           mingw32-gtk3 \\\n                           bison \\\n                           flex \\\n                           gettext \\\n                           gobject-introspection-devel \\\n                           atk-devel \\\n                           libsoup-devel \\\n                           webkitgtk3-devel \\\n                           webkitgtk4-devel \\\n                           gtksourceview3-devel \\\n                           poppler-glib-devel \\\n                           vte291-devel \\\n                           libnotify-devel \\\n                           gstreamer1-devel \\\n                           gstreamer1-plugins-base-devel \\\n                           gperf \\\n                           ruby \\\n                           wget \\\n                           tar \\\n                           xz \\\n                           make \\\n                           p7zip \\\n                           unzip \\\n                           cabextract \\\n                           cabal-install \\\n                           git \\\n                           msitools \\\n                           Xvfb \\\n                           which \\\n                           mono-core \\\n                           mono-locale-extras \\\n                           libxslt \\\n                           rpm-build\n\nRUN sudo dnf -y --enablerepo updates-testing install dnf-plugins-core\n\nRUN dnf download --source mingw32-webkitgtk3 && \\\n    rpm -i mingw-webkitgtk3-2.4.9-1.fc23.src.rpm\n\nRUN ls /usr/src\n\nADD linux/specfiles/mingw-webkitgtk3.spec /root/rpmbuild/SPECS/\n\nRUN cd /root/rpmbuild/SOURCES && \\\n    wget https://raw.githubusercontent.com/Alexpux/MINGW-packages/master/mingw-w64-webkitgtk3/0101-webkitgtk-2.4.3-gcc-asm.all.patch\n\nRUN cd /root/rpmbuild/SPECS && \\\n    rpmbuild -ba mingw-webkitgtk3.spec\n\nRUN sudo rpm -i /root/rpmbuild/RPMS/noarch/mingw64-webkitgtk3-2.4.9-1.fc23.noarch.rpm\n\nRUN rm -rf /root/rpmbuild\nRUN sudo dnf clean all\n\nRUN wget http://winetricks.org/winetricks && \\\n    sudo cp winetricks /usr/bin && \\\n    sudo chmod +x /usr/bin/winetricks\n\n# Install pkg-config for using in Wine and Windows\nRUN wget http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz && \\\n    tar -xzf pkg-config-0.28.tar.gz && \\\n    cd pkg-config-0.28 && \\\n    mingw64-configure && \\\n    make && \\\n    sudo make install && \\\n    make clean && \\\n    rm -rf pkg-config-0.28.tar.gz pkg-config-0.28\n\n# Fix the broken pkg-config files (it is important to use ${prefix} or they will not work\n# when used on Windows or in Wine:\nRUN grep -lZ '^Cflags:.*-I/usr/x86_64-w64-mingw32/sys-root/mingw' /usr/x86_64-w64-mingw32/sys-root/mingw/lib/pkgconfig/*.pc | xargs -0 -l sudo sed -i.bak -e '/^Cflags:/ s|-I/usr/x86_64-w64-mingw32/sys-root/mingw|-I${prefix}|g'\n\n# Initialize Wine:\nRUN wineboot && wine cmd /C echo \"Wine OK\" && wineserver -w && \\\n    ( export WINEPREFIX=~/.wine32 && export WINEARCH=win32 && \\\n      wineboot && wine cmd /C echo \"Wine 32 OK\" && xvfb-run winetricks --unattended dotnet40 corefonts && wineserver -w \\\n    )\n\nENV GHCVER 7.10.3\n\n# Install Windows version of GHC (but not the old mingw that comes with it):\nRUN cd ~/.wine/drive_c && \\\n    wget https://www.haskell.org/ghc/dist/$GHCVER/ghc-$GHCVER-x86_64-unknown-mingw32.tar.xz && \\\n    tar -xJf ghc-$GHCVER-x86_64-unknown-mingw32.tar.xz && \\\n    rm -rf ghc-*/mingw && \\\n    rm ghc-*-x86_64-unknown-mingw32.tar.xz\n\n# Use `wine regedit` to add a `Path` to `HKEY_CURRENT_USER\\Environment`:\nRUN ( echo 'REGEDIT4' && \\\n      echo && \\\n      echo '[HKEY_CURRENT_USER\\Environment]' && \\\n      echo '\"Path\"=\"C:\\\\users\\\\root\\\\Application Data\\\\cabal\\\\bin;C:\\\\ghc-'$GHCVER'\\\\bin;C:\\\\bin;Z:\\\\usr\\\\x86_64-w64-mingw32\\\\sys-root\\\\mingw\\\\bin;%PATH%\"') > Environment.reg && \\\n    wine regedit Environment.reg && \\\n    ( echo 'REGEDIT4' && \\\n      echo && \\\n      echo '[HKEY_CURRENT_USER\\Environment]' && \\\n      echo '\"Path\"=\"C:\\\\users\\\\root\\\\Application Data\\\\cabal\\\\bin;C:\\\\ghc-'$GHCVER'\\\\bin;C:\\\\bin;Z:\\\\usr\\\\i686-w64-mingw32\\\\sys-root\\\\mingw\\\\bin;%PATH%\"') > Environment.reg && \\\n    ( export WINEPREFIX=~/.wine32 && export WINEARCH=win32 && \\\n      wine regedit Environment.reg && wineserver -w \\\n    ) && \\\n    rm Environment.reg\n    \n# Replace the MinGW that comes with GHC:\nRUN cd ~/.wine/drive_c/ghc-$GHCVER && \\\n    wget http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.2/threads-posix/seh/x86_64-4.9.2-release-posix-seh-rt_v4-rev2.7z && \\\n    7za x x86_64-4.9.2-release-posix-seh-rt_v4-rev2.7z && \\\n    mv mingw64 mingw && \\\n    rm -rf x86_64-4.9.2-release-posix-seh-rt_v4-rev2.7z\n\n# Install WiX Toolset:\nADD wix39-binaries.zip /root/\nRUN mkdir ~/.wine32/drive_c/bin && \\\n    cd ~/.wine32/drive_c/bin && \\\n    unzip ~/wix39-binaries.zip && \\\n    rm ~/wix39-binaries.zip\n\n# Install 64bit Windows version of cabal-install:\nRUN mkdir ~/.wine/drive_c/bin && \\\n    cd ~/.wine/drive_c/bin && \\\n    wget http://leksah.org/packages/cabal-mingw64.7z && \\\n    7za x cabal-mingw64.7z && \\\n    rm cabal-mingw64.7z\n\n# Run `cabal update` and install some packages we will need.\n# Some packages need us to run `mingw64-configure` manually (after `wine cabal configure` fails):\nRUN wineserver -p1 && \\\n    cabal update && \\\n    wine cabal update && \\\n    wine cabal install Cabal && \\\n    wine cabal install old-locale && \\\n    cabal unpack network && \\\n    cd network-* && \\\n    (wine cabal configure || true) && \\\n    mingw64-configure && \\\n    wine cabal build && \\\n    wine cabal copy && \\\n    wine cabal register && \\\n    cd .. && \\\n    cabal unpack old-time && \\\n    cd old-time-* && \\\n    (wine cabal configure || true) && \\\n    mingw64-configure && \\\n    wine cabal build && \\\n    wine cabal copy && \\\n    wine cabal register && \\\n    cd .. && \\\n    wine cabal install alex happy && \\\n    wine cabal install gtk2hs-buildtools && \\\n    wineserver -w && \\\n    rm -rf network-* old-time-*\n\n# Install fonts to bundle with Leksah\nRUN sudo dnf -y install \\\n                   dejavu-sans-fonts \\\n                   dejavu-serif-fonts \\\n                   dejavu-sans-mono-fonts \\\n                   dejavu-lgc-sans-fonts \\\n                   dejavu-lgc-serif-fonts \\\n                   dejavu-lgc-sans-mono-fonts && \\\n    sudo dnf clean all && \\\n    mkdir -p ~/.wine32/drive_c/dejavu-fonts/ttf && \\\n    ln -s /usr/share/fonts/dejavu/* ~/.wine32/drive_c/dejavu-fonts/ttf\n\n# Install grep to bundle with Leksah:\nRUN mkdir grep && \\\n    cd grep && \\\n    wget http://sourceforge.net/projects/mingw/files/MSYS/Base/grep/grep-2.5.4-2/grep-2.5.4-2-msys-1.0.13-bin.tar.lzma && \\\n    tar --lzma -xvf grep-2.5.4-2-msys-1.0.13-bin.tar.lzma && \\\n    sudo cp bin/*grep.exe /usr/x86_64-w64-mingw32/sys-root/mingw/bin && \\\n    rm grep-2.5.4-2-msys-1.0.13-bin.tar.lzma\n\nRUN wineserver -p1 && \\\n    wine cabal update && \\\n    wineserver -w\n\nRUN wineserver -p1 && \\\n    wine cabal install shakespeare lens hlint hscolour && \\\n    wineserver -w\n\nRUN git clone https://github.com/haskell-gi/haskell-gi-base.git && \\\n    git clone https://github.com/haskell-gi/haskell-gi.git && \\\n    git clone https://github.com/ghcjs/jsaddle.git && \\\n    git clone https://github.com/ghcjs/jsaddle-dom.git && \\\n    git clone https://github.com/ghcjs/ghcjs-dom.git\n\nRUN sudo dnf copr -y enable petersen/ghc-$GHCVER\nRUN sudo dnf install -y ghc cabal-install\nRUN cabal install happy alex\n\nRUN ghc-pkg list\n\nRUN cabal install ./haskell-gi-base ./haskell-gi --force-reinstalls\n\nRUN cd haskell-gi/bindings && \\\n    LANG=en_GB.UTF-8 PATH=/root/.cabal/bin:$PATH ./genBindings.sh\n\n# Add Leksah files to Docker:\nADD leksah.cabal LICENSE LICENSE.rtf Readme.md Setup.lhs SetupLocale.lhs sources.txt leksah/\n\n# Docker has no way to COPY or ADD two directories at once!?!?\nADD bew leksah/bew\nADD data leksah/data\nADD doc leksah/doc\nADD language-specs leksah/language-specs\nADD linux leksah/linux\nADD main leksah/main\nADD osx leksah/osx\nADD pics leksah/pics\nADD po leksah/po\nADD scripts leksah/scripts\nADD src leksah/src\nADD tests leksah/tests\nADD vendor leksah/vendor\nADD win32 leksah/win32\n\nRUN wineserver -p1 && \\\n    rm -rf haskell-gi-base/dist && \\\n    wine cabal install \\\n                 ./haskell-gi-base \\\n                 ./haskell-gi/bindings/GLib \\\n                 ./haskell-gi/bindings/Gdk \\\n                 ./haskell-gi/bindings/Gtk \\\n                 ./haskell-gi/bindings/Atk \\\n                 ./haskell-gi/bindings/GdkPixbuf \\\n                 ./haskell-gi/bindings/Pango \\\n                 ./haskell-gi/bindings/Cairo \\\n                 ./haskell-gi/bindings/PangoCairo \\\n                 ./haskell-gi/bindings/WebKit \\\n                 ./haskell-gi/bindings/Gio \\\n                 ./haskell-gi/bindings/JavaScriptCore-3.0 \\\n                 ./haskell-gi/bindings/GtkSource \\\n                 ./haskell-gi/bindings/Notify \\\n                 ./haskell-gi/bindings/GObject \\\n                 ./haskell-gi/bindings/Soup && \\\n    wineserver -w\n\nRUN git clone https://github.com/gtk2hs/gi-gtk-hs.git\n\nRUN wineserver -p1 && \\\n    rm -rf haskell-gi-base/dist && \\\n    wine cabal install \\\n                 ./gi-gtk-hs ./jsaddle ./jsaddle-dom ./ghcjs-dom \\\n                 ./leksah/vendor/haskellVCSGUI/vcsgui && \\\n    wineserver -w\n\n# Build leksah and make the MSI file:\nRUN wineserver -p1 && \\\n    cd leksah && \\\n    ./win32/makeinstaller.sh && \\\n    wineserver -w",
    "raw_stdout_log": "Sending build context to Docker daemon  19.09MB\r\r\nStep 1/59 : FROM Fedora-Docker-Base-23-20151030.x86_64",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/leksah/leksah",
    "repo_commit": "c179b31ecfa305044a2fd233aace0d48e7aa3a77",
    "repo_id": 1367150
  },
  {
    "raw_dockerfile": "FROM ARG_FROM\n\nLABEL maintainer = \"VMware <kreddyj@vmware.com>\"\nLABEL author = \"Krishna Karthik <kreddyj@vmware.com>\"\n\nADD ARG_DOCK/bin/ARG_ARCH/ARG_BIN /ARG_BIN",
    "raw_stdout_log": "Sending build context to Docker daemon  163.8MB\r\r\nStep 1/4 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/vmware/purser",
    "repo_commit": "fc355939102d5c6a4d4eafbab8ff9cba484e6bcc",
    "repo_id": 145568709
  },
  {
    "raw_dockerfile": "FROM ARG_FROM\n\n# Build-time metadata as defined at http://label-schema.org\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nARG DOCKER_TAG\n\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"Currency Exchange Server\" \\\n      org.label-schema.description=\"Currency Exchange Server\" \\\n      org.label-schema.url=\"https://github.com/me-io/go-swap\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/me-io/go-swap\" \\\n      org.label-schema.vendor=\"ME.IO\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"$DOCKER_TAG\"\n\nRUN apk update \\\n    && apk upgrade \\\n    && apk add --no-cache ca-certificates \\\n    && update-ca-certificates\n\nADD bin/ARG_OS-ARG_ARCH/ARG_SRC_BIN /ARG_BIN\nENV BINSRC_ENV=\"/ARG_BIN\"\nCOPY scripts/docker-entrypoint.sh /usr/local/bin/\n\nEXPOSE 5000\n\nUSER nobody:nobody\nENTRYPOINT [\"docker-entrypoint.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  641.5kB\r\r\nStep 1/13 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/me-io/go-swap",
    "repo_commit": "b8d825d1873d6bc8f26df343b47f6d0a6b115a50",
    "repo_id": 147701196
  },
  {
    "raw_dockerfile": "FROM ARG_FROM\n\n# Build-time metadata as defined at http://label-schema.org\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nARG DOCKER_TAG\n\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.name=\"Currency Exchange Server\" \\\n      org.label-schema.description=\"Currency Exchange Server\" \\\n      org.label-schema.url=\"https://github.com/me-io/memcached-util\" \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.vcs-url=\"https://github.com/me-io/memcached-util\" \\\n      org.label-schema.vendor=\"ME.IO\" \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.schema-version=\"$DOCKER_TAG\"\n\nRUN apk update \\\n    && apk upgrade \\\n    && apk add --no-cache ca-certificates \\\n    && update-ca-certificates\n\nADD bin/ARG_OS-ARG_ARCH/ARG_SRC_BIN /ARG_BIN\nENV BINSRC_ENV=\"/ARG_BIN\"\nCOPY scripts/docker-entrypoint.sh /usr/local/bin/\n\nUSER nobody:nobody\nENTRYPOINT [\"docker-entrypoint.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  195.1kB\r\r\nStep 1/12 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/me-io/memcached-util",
    "repo_commit": "60023fdb899e8000e996c911529cd0f09f4f78c7",
    "repo_id": 150969369
  },
  {
    "raw_dockerfile": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ARG_FROM\n\nADD bin/ARG_ARCH/ARG_BIN /ARG_BIN\nRUN mkdir /var/www\n\nUSER nobody:nobody\nENTRYPOINT [\"/ARG_BIN\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  255.5kB\r\r\nStep 1/5 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/e3prom/ruse",
    "repo_commit": "e897021218b4e9125259d9e599d550568a876fa9",
    "repo_id": 158600242
  },
  {
    "raw_dockerfile": "FROM __ARCH__/__TAG__\n\nCOPY bin/qemu-__QEMU__-static /usr/bin/\n\nRUN __DEPENDENCIES__\n\nENV PKG_CACHE_PATH=/fetched\n\nRUN mkdir -p /fetched && npm install pkg-fetch\n\nRUN /node_modules/.bin/pkg-fetch __NODE_PKG__ __PKG_OS__ __PKG_ARCH__\n\nCMD [\"sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  20.99kB\r\r\nStep 1/7 : FROM __ARCH__/__TAG__",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/robertsLando/pkg-binaries",
    "repo_commit": "278dc0f4f50ee1bf5c63c2b9a5cab95b74f07011",
    "repo_id": 161341410
  },
  {
    "raw_dockerfile": "FROM {ARG_FROM}\n\nADD bin/{ARG_OS}_{ARG_ARCH}/{ARG_BIN} /{ARG_BIN}\n\nENTRYPOINT [\"/{ARG_BIN}\", \"run\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  37.64MB\r\r\nStep 1/3 : FROM {ARG_FROM}",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/practo/k8s-worker-pod-autoscaler",
    "repo_commit": "1cf1e7b6e2707658f0dfa91ee8272c6bd6b1ebc4",
    "repo_id": 198933011
  },
  {
    "raw_dockerfile": "FROM balenalib/%%BALENA_MACHINE_NAME%%-node:8-build\n\n#install packages\nRUN install_packages bluetooth bluez libbluetooth-dev libudev-dev\n\n# Defines our working directory in container\nWORKDIR /usr/src/app\n\n# Copies the package.json first for better cache on later pushes\nCOPY package.json package.json\n\n# This install npm dependencies on the balena build server,\n# making sure to clean up the artifacts it creates in order to reduce the image size.\nRUN JOBS=MAX npm install --production --unsafe-perm && npm cache verify && rm -rf /tmp/*\n\n# This will copy all files in our root to the working  directory in the container\nCOPY . ./\n\n# Enable udevd so that plugged dynamic hardware devices show up in our container.\nENV UDEV=1\n\n# server.js will run when container starts up on the device\nCMD [\"npm\", \"start\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  200.2kB\r\r\nStep 1/8 : FROM balenalib/%%BALENA_MACHINE_NAME%%-node:8-build",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balenalabs-incubator/balena-web-ble",
    "repo_commit": "827a6f06e262730a8a62fa7394a3d97b2b383ca7",
    "repo_id": 205540491
  },
  {
    "raw_dockerfile": "FROM balenalib/%%BALENA_MACHINE_NAME%%-python\n\n# pip install python deps from requirements.txt\n# For caching until requirements.txt changes\nCOPY ./requirements.txt /requirements.txt\nRUN READTHEDOCS=True pip install -r /requirements.txt\n\nCOPY . /usr/src/app\nWORKDIR /usr/src/app\n\nCMD [\"bash\",\"start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  364.5kB\r\r\nStep 1/6 : FROM balenalib/%%BALENA_MACHINE_NAME%%-python",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/balena-rpi-python-picamera",
    "repo_commit": "8eb2af20befd172943655b12355494dfdd1e1d90",
    "repo_id": 28183446
  },
  {
    "raw_dockerfile": "FROM balenalib/%%BALENA_MACHINE_NAME%%-python:3-stretch-run\n\n# Install Dropbear.\nRUN install_packages dropbear\n\n# Install Flask\nCOPY ./requirements.txt /requirements.txt\nRUN pip install -r /requirements.txt\n\nCOPY . /usr/src/app\nWORKDIR /usr/src/app\n\nCMD [\"bash\", \"start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  138.2kB\r\r\nStep 1/7 : FROM balenalib/%%BALENA_MACHINE_NAME%%-python:3-stretch-run",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/balena-ssh-python",
    "repo_commit": "2185b8518ea3cf315e47fd2ce2e93cdea9eee29d",
    "repo_id": 29790014
  },
  {
    "raw_dockerfile": "# Build Ubuntu image\nFROM @BUILD_ARCH@/@BUILD_FLAVOR@:@BUILD_RELEASE@\n\n# see https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#/run\nRUN apt-get update && \\\n  apt-get install -y --no-install-recommends \\\n  @BUILD_PACKAGES@ \\\n  build-essential \\\n  g++\n\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY . /usr/src/app",
    "raw_stdout_log": "Sending build context to Docker daemon  2.851MB\r\r\nStep 1/5 : FROM @BUILD_ARCH@/@BUILD_FLAVOR@:@BUILD_RELEASE@",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/google/glog",
    "repo_commit": "3ba8976592274bc1f907c402ce22558011d6fc5e",
    "repo_id": 31197250
  },
  {
    "raw_dockerfile": "FROM balenalib/%%RESIN_MACHINE_NAME%%-debian\n\nRUN install_packages dnsmasq wireless-tools\n\nWORKDIR /usr/src/app\n\nRUN curl https://api.github.com/repos/balena-io/wifi-connect/releases/latest -s \\\n    | grep -hoP 'browser_download_url\": \"\\K.*%%RESIN_ARCH%%\\.tar\\.gz' \\\n    | xargs -n1 curl -Ls \\\n    | tar -xvz -C /usr/src/app/\n\nCOPY scripts/start.sh .\n\nCMD [\"bash\", \"start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  5.625MB\r\r\nStep 1/6 : FROM balenalib/%%RESIN_MACHINE_NAME%%-debian",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io/wifi-connect",
    "repo_commit": "5517a15cbaa8c5678860828c8dffa5dcf642101c",
    "repo_id": 37727198
  },
  {
    "raw_dockerfile": "# base-image for python on any machine using a template variable,\n# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/\nFROM balenalib/%%BALENA_MACHINE_NAME%%-python:3-stretch-run\n\n# use `install_packages` if you need to install dependencies,\n# for instance if you need git, just uncomment the line below.\n# RUN install_packages git\n\n# Set our working directory\nWORKDIR /usr/src/app\n\n# Copy requirements.txt first for better cache on later pushes\nCOPY requirements.txt requirements.txt\n\n# pip install python deps from requirements.txt on the resin.io build server\nRUN pip install -r requirements.txt\n\n# This will copy all files in our root to the working  directory in the container\nCOPY . ./\n\n# Enable udevd so that plugged dynamic hardware devices show up in our container.\nENV UDEV=1\n\n# main.py will run when container starts up on the device\nCMD [\"python\",\"-u\",\"src/main.py\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  998.9kB\r\r\nStep 1/7 : FROM balenalib/%%BALENA_MACHINE_NAME%%-python:3-stretch-run",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-examples/balena-python-hello-world",
    "repo_commit": "f9d139b80a7df94f90d7b9098b1353b14ca31b85",
    "repo_id": 38619175
  },
  {
    "raw_dockerfile": "# base-image for node on any machine using a template variable,\n# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/#dockerfile-templates\n# and about balena base images here: https://www.balena.io/docs/reference/base-images/base-images/\nFROM balenalib/%%BALENA_MACHINE_NAME%%-node:10-stretch-run\n\n# use `install_packages` if you need to install dependencies,\n# for instance if you need git, just uncomment the line below.\n# RUN install_packages git\n\n# Defines our working directory in container\nWORKDIR /usr/src/app\n\n# Copies the package.json first for better cache on later pushes\nCOPY package.json package.json\n\n# This install npm dependencies on the balena build server,\n# making sure to clean up the artifacts it creates in order to reduce the image size.\nRUN JOBS=MAX npm install --production --unsafe-perm && npm cache verify && rm -rf /tmp/*\n\n# This will copy all files in our root to the working  directory in the container\nCOPY . ./\n\n# Enable udevd so that plugged dynamic hardware devices show up in our container.\nENV UDEV=1\n\n# server.js will run when container starts up on the device\nCMD [\"npm\", \"start\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  499.2kB\r\r\nStep 1/7 : FROM balenalib/%%BALENA_MACHINE_NAME%%-node:10-stretch-run",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-examples/balena-node-hello-world",
    "repo_commit": "3b886dd52c851f2127a7fb6f5ebc06b98e06d31f",
    "repo_id": 38620788
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-python\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && apt-get install -y \\\n  iceweasel dropbear xserver-xorg-core xserver-xorg-video-fbdev x11-xserver-utils \\\n  libgl1-mesa-dri xserver-xorg-video-modesetting xserver-xorg-video-vesa \\\n  matchbox-window-manager openvpn xautomation feh \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nADD run /bin/run\nADD jodel-wallpaper.png /etc/wallpaper.png\nADD dot-mozilla /root/.mozilla\n\nENTRYPOINT [ \"/bin/run\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  284.2kB\r\r\nStep 1/7 : FROM resin/%%RESIN_MACHINE_NAME%%-python",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/Jodel/dashboard-viewer",
    "repo_commit": "40206a1a7cec087a5657cc3580fdfd821852788b",
    "repo_id": 51079352
  },
  {
    "raw_dockerfile": "#\n#  Globality autogenerated Docker configuration\n#\n#  This file is auto generated with globality-build.\n#  You should not make any changes to this file manually\n#\n#  Any changes made to this file will be overwritten in the\n#  next version of the build.\n#\n#  See: http://github.com/globality-corp/globality-build\n#\n#\n\n\nFROM <REPO>/python-library:base-<SHA1>\n\n# Setup invocation\n#\n# We expose the application on the standard HTTP port and use an entrypoint\n# to customize the `dev` and `test` targets.\n\nENV NAME microcosm\nCOPY entrypoint.sh /src/\nENTRYPOINT [\"./entrypoint.sh\"]\n\n# Install source\n#\n# We should not need to reinstall dependencies here, but we do need to import\n# the distribution properly. We also save build arguments to the image using\n# microcosm-compatible environment variables.\n\n\nARG BUILD_NUM\nARG SHA1\nENV MICROCOSM__BUILD_INFO_CONVENTION__BUILD_NUM ${BUILD_NUM}\nENV MICROCOSM__BUILD_INFO_CONVENTION__SHA1 ${SHA1}\nCOPY $NAME /src/$NAME/\nRUN pip install --extra-index-url $EXTRA_INDEX_URL -e .",
    "raw_stdout_log": "Sending build context to Docker daemon   89.6kB\r\r\nStep 1/10 : FROM <REPO>/python-library:base-<SHA1>",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/globality-corp/microcosm",
    "repo_commit": "804e4842112e61cacd8d4ca0a848e4e697d7963a",
    "repo_id": 51452284
  },
  {
    "raw_dockerfile": "#base-image for node on any machine using a template var\nFROM resin/%%RESIN_MACHINE_NAME%%-node\n\n# install native deps\nRUN apt-get update && \\\n    apt-get install -qy \\\n     wireless-tools \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Defines our working directory in container\nWORKDIR /usr/src/app\n\n# Copies the package.json first for better cache on later pushes\nCOPY package.json package.json\n\n# This install npm dependencies on the resin.io build server,\n# making sure to clean up the artifacts it creates in order to reduce the image size.\nRUN JOBS=MAX npm install --production --unsafe-perm && npm cache clean && rm -rf /tmp/*\n\n# copy all files to /usr/src/app  dir\nCOPY . ./\n\n# Enable systemd init system in container\nENV INITSYSTEM=on\n\n# Run server when container runs on device\nCMD [\"bash\", \"start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon   89.6kB\r\r\nStep 1/8 : FROM resin/%%RESIN_MACHINE_NAME%%-node",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/balena-aws-device",
    "repo_commit": "eddb34f3cf3186ccbe383cf5bf0c79053d2e6acd",
    "repo_id": 52982181
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-buildpack-deps\n\n# Enable systemd, as Resin requires this\nENV INITSYSTEM on\n\n# Make the hardware type available as a runtime env var\nENV RESIN_ARCH %%RESIN_ARCH%%\nENV RESIN_MACHINE_NAME %%RESIN_MACHINE_NAME%%\n\n# Version number of gateway software.\n# (Incrementing this simply forces Docker to flush its cache\n#  and thus forces a full rebuild. Not used outside of Dockerfile.)\nENV TTN_GATEWAY_SOFTWARE 51\n\n# Copy the build and run environment\nCOPY . /opt/ttn-gateway/\nWORKDIR /opt/ttn-gateway/\n\n# Build the gateway (or comment this out if debugging on-device)\nRUN ./dev/build.sh && rm -rf ./dev\n\n# Start it up\nCMD [\"sh\", \"-c\", \"./run.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  162.8kB\r\r\nStep 1/9 : FROM resin/%%RESIN_MACHINE_NAME%%-buildpack-deps",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/rayozzie/ttn-resin-gateway-rpi",
    "repo_commit": "e2af475f90186e58351381099cf3811ff362506a",
    "repo_id": 54725144
  },
  {
    "raw_dockerfile": "################################################################################\n# Base image\n################################################################################\n\nFROM balenalib/%%BALENA_MACHINE_NAME%%-debian as base\n\nENV DEBIAN_FRONTEND=noninteractive\n\n################################################################################\n# Rust image\n################################################################################\n\nFROM base as rust\n\n# Install build tools\nRUN apt-get -q update && apt-get install -yq --no-install-recommends build-essential curl file\n\n# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=923479\n# https://github.com/balena-io-library/base-images/issues/562\nRUN c_rehash\n\nENV PATH=/root/.cargo/bin:$PATH\n\n# Install Rust\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain 1.37.0 -y\n\n################################################################################\n# Dependencies\n################################################################################\n\nFROM rust as dependencies\n\nWORKDIR /build\n\n# Create new fake project ($USER is needed by `cargo new`)\nRUN USER=root cargo new app\n\nWORKDIR /build/app\n\n# Copy real app dependencies\nCOPY Cargo.* ./\n\n# Build fake project with real dependencies\nRUN cargo build --release\n\n# Remove the fake app build artifacts\n#\n# NOTE If your application name contains `-` (`foo-bar` for example)\n# then the correct command to remove build artifacts looks like:\n#\n# RUN rm -rf target/release/foo-bar target/release/deps/foo_bar-*\n#                              ^                           ^\nRUN rm -rf target/release/hello* target/release/deps/hello-*\n\n################################################################################\n# Builder\n################################################################################\n\nFROM rust as builder\n\n# We do not want to download deps, update registry, ... again\nCOPY --from=dependencies /root/.cargo /root/.cargo\n\nWORKDIR /build/app\n\n# Copy everything, not just source code\nCOPY . .\n\n# Update already built deps from dependencies image\nCOPY --from=dependencies /build/app/target target\n\n# Build real app\nRUN cargo build --release\n\n################################################################################\n# Final image\n################################################################################\n\nFROM base\n\nWORKDIR /app\n\n# Copy binary from builder image\nCOPY --from=builder /build/app/target/release/hello .\n\n# Copy other folders required by the application. Example:\n# COPY --from=builder /build/app/assets assets\n\n# Launch application\nCMD [\"./hello\", \"%%BALENA_MACHINE_NAME%%\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  1.626MB\r\r\nStep 1/24 : FROM balenalib/%%BALENA_MACHINE_NAME%%-debian as base",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-examples/balena-rust-hello-world",
    "repo_commit": "156425370b685a1f8d91648d66605dda1ac5949e",
    "repo_id": 59838676
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-debian:latest\n\n# Enable systemd\nENV INITSYSTEM on\n\n# versions\nENV PROMETHEUS_VERSION 0.20.0\nENV NODE_EXPORTER_VERSION 0.12.0\nENV ALERTMANAGER_VERSION 0.2.0\n# arch\nENV DIST_ARCH linux-armv7\n\n# default configs\nENV THRESHOLD_CPU 50\nENV THRESHOLD_FS 50\nENV THRESHOLD_MEM 500\nENV STORAGE_LOCAL_RETENTION 360h0m0s\n\n# downloading utils\nRUN apt-get update && apt-get install wget\n\n# alertmanager deps\nRUN apt-get install build-essential libc6-dev\n\nWORKDIR /etc\n\n# get prometheus server\nRUN wget https://github.com/prometheus/prometheus/releases/download/$PROMETHEUS_VERSION/prometheus-$PROMETHEUS_VERSION.$DIST_ARCH.tar.gz  \\\n\t&& tar xvfz prometheus-$PROMETHEUS_VERSION.$DIST_ARCH.tar.gz \\\n\t&& rm prometheus-$PROMETHEUS_VERSION.$DIST_ARCH.tar.gz\n\n# get prometheus alertmanager\nRUN wget https://github.com/prometheus/alertmanager/releases/download/$ALERTMANAGER_VERSION/alertmanager-$ALERTMANAGER_VERSION.$DIST_ARCH.tar.gz  \\\n\t&& tar xvfz alertmanager-$ALERTMANAGER_VERSION.$DIST_ARCH.tar.gz \\\n\t&& rm alertmanager-$ALERTMANAGER_VERSION.$DIST_ARCH.tar.gz\n\n# get node exporter\nRUN wget https://github.com/prometheus/node_exporter/releases/download/$NODE_EXPORTER_VERSION/node_exporter-$NODE_EXPORTER_VERSION.$DIST_ARCH.tar.gz  \\\n\t&& tar xvfz node_exporter-$NODE_EXPORTER_VERSION.$DIST_ARCH.tar.gz \\\n\t&& rm node_exporter-$NODE_EXPORTER_VERSION.$DIST_ARCH.tar.gz\n\nCOPY config/ ./config\n\nWORKDIR /\n\nCOPY start.sh ./\n\n# run when container lands on device\nCMD [\"bash\", \"start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  1.983MB\r\r\nStep 1/20 : FROM resin/%%RESIN_MACHINE_NAME%%-debian:latest",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/balena-prometheus",
    "repo_commit": "d0d0b834016850d270c1742a5279e41158fa45b5",
    "repo_id": 62328816
  },
  {
    "raw_dockerfile": "# base-image for python on any machine using a template variable,\n# see more about dockerfile templates here: http://docs.resin.io/deployment/docker-templates/\n# and about resin base images here: http://docs.resin.io/runtime/resin-base-images/\nFROM resin/%%RESIN_MACHINE_NAME%%-python:wheezy\n\n# Use apt-get if you need to install dependencies\nRUN apt-get update && apt-get install -yq \\\n    build-essential \\\n    python-dev \\\n    git \\\n    scons \\\n    swig && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Set our working directory\nWORKDIR /usr/src/app\n\n# Install neopixel library\nRUN git clone https://github.com/jgarff/rpi_ws281x.git && cd rpi_ws281x && scons && cd python && python setup.py install\n\n# Install PN532 library\nRUN git clone https://github.com/josephroberts/Adafruit_Python_PN532.git && cd Adafruit_Python_PN532 && python setup.py install\n\n# Copy requirements.txt first for better cache on later pushes\nCOPY ./requirements.txt /requirements.txt\n\n# pip install python deps from requirements.txt on the resin.io build server\nRUN pip install -r /requirements.txt\n\n# This will copy all files in our root to the working  directory in the container\nCOPY . ./\n\n# Switch off systemd init system in container to enable auto-restart\nENV INITSYSTEM off\n\n# main.py will run when container starts up on the device\nCMD [\"python\",\"main.py\"]",
    "raw_stdout_log": "Sending build context to Docker daemon   3.68MB\r\r\nStep 1/10 : FROM resin/%%RESIN_MACHINE_NAME%%-python:wheezy",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/office-lock",
    "repo_commit": "9d028f4274fc4b41ffa7aa1499ff7937cf62023a",
    "repo_id": 62379419
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-node:slim\n\n# Install wget and curl\nRUN apt-get clean && apt-get update && apt-get install -y \\\n  wget \\\n  curl\n\n# Add Kodi-16 apt source\nRUN echo \"deb http://pipplware.pplware.pt/pipplware/dists/jessie/main/binary /\" \\\n>> /etc/apt/sources.list.d/pipplware_jessie.list && \\\nwget -O - http://pipplware.pplware.pt/pipplware/key.asc | sudo apt-key add -\n\n# WTF is going on with httpredir from debian? removing it the dirty way\nRUN sed -i \"s@httpredir.debian.org@`curl -s -D - http://httpredir.debian.org/demo/debian/ | awk '/^Link:/ { print $2 }' | sed -e 's@<http://\\(.*\\)/debian/>;@\\1@g'`@\" /etc/apt/sources.list\n\n# Install apt deps\nRUN apt-get clean && apt-get update && apt-get upgrade -y && apt-get install -y \\\n  apt-utils \\\n  build-essential \\\n  libasound2-dev \\\n  libffi-dev \\\n  libssl-dev \\\n  python-dev \\\n  python-pip \\\n  git \\\n  alsa-base \\\n  alsa-utils \\\n  kodi && rm -rf /var/lib/apt/lists/*\n\n# Configure for Kodi\nCOPY ./Dockerbin/99-input.rules /etc/udev/rules.d/99-input.rules\nCOPY ./Dockerbin/10-permissions.rules /etc/udev/rules.d/10-permissions.rules\nRUN addgroup --system input && \\\nusermod -a -G audio root && \\\nusermod -a -G video root && \\\nusermod -a -G input root && \\\nusermod -a -G dialout root && \\\nusermod -a -G plugdev root && \\\nusermod -a -G tty root\n\n# Set npm\nRUN npm config set unsafe-perm true\n\n# Uncomment if you want to Configure for pHAT DAC\n# COPY ./Dockerbin/asound.conf /etc/asound.conf\n\n# Save source folder\nRUN printf \"%s\\n\" \"${PWD##}\" > SOURCEFOLDER\n\n# Move to app dir\nWORKDIR /usr/src/app\n\n# Move package.json to filesystem\nCOPY \"$SOURCEFOLDER/app/package.json\" ./\n\n# NPM i app\nRUN JOBS=MAX npm i --production\n\n# Move app to filesystem\nCOPY \"$SOURCEFOLDER/app\" ./\n\n# Move to /\nWORKDIR /\n\n## uncomment if you want systemd\nENV INITSYSTEM on\n\n# Start app\nCMD [\"bash\", \"/usr/src/app/start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon   89.6kB\r\r\nStep 1/17 : FROM resin/%%RESIN_MACHINE_NAME%%-node:slim",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/balena-kodi",
    "repo_commit": "2a7043476a24d728a649f0f46f7a419851d22db3",
    "repo_id": 64039511
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-buildpack-deps\n\nMAINTAINER Spyros Maniatopoulos spmaniato@gmail.com\n\n# Switch on systemd init system in container and set various other variables\nENV INITSYSTEM=\"on\" \\\n    TERM=\"xterm\" \\\n    PYTHONIOENCODING=\"UTF-8\"\n\n# Variables for ROS distribution, configuration, and relevant directories\nENV ROS_DISTRO=\"indigo\" \\\n    ROS_CONFIG=\"ros_base\"\nENV CATKIN_WS=\"/usr/catkin_ws\" \\\n    ROS_INSTALL_DIR=\"/opt/ros/$ROS_DISTRO\"\n\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n    python-dev python-pip\n\n# Install ROS-related Python tools\nCOPY ./requirements.txt .\nRUN pip install -r requirements.txt && rm requirements.txt\n\nRUN rosdep init \\\n    && rosdep update\n\nRUN mkdir -p $CATKIN_WS/src $ROS_INSTALL_DIR\n\nWORKDIR $CATKIN_WS\n\nRUN rosinstall_generator $ROS_CONFIG --rosdistro $ROS_DISTRO \\\n    --deps --tar > .rosinstall \\\n    && wstool init src .rosinstall \\\n    && rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y \\\n       --skip-keys python-rosdep \\\n       --skip-keys python-rospkg \\\n       --skip-keys python-catkin-pkg \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN catkin init \\\n    && catkin config --install --install-space $ROS_INSTALL_DIR \\\n       --cmake-args -DCMAKE_BUILD_TYPE=Release \\\n    && catkin build --no-status --no-summary --no-notify \\\n    && catkin clean -y --logs --build --devel\n\nWORKDIR /usr\n\nRUN rm -rf $CATKIN_WS\n\nCOPY ./ros_entrypoint.sh .\n\nENTRYPOINT [\"bash\", \"ros_entrypoint.sh\"]\n\nCMD [\"bash\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  8.192kB\r\r\nStep 1/18 : FROM resin/%%RESIN_MACHINE_NAME%%-buildpack-deps",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/spmaniato/resin-ros",
    "repo_commit": "b721785694e6c9f66ba0bb68b9cff008d1882b67",
    "repo_id": 64343734
  },
  {
    "raw_dockerfile": "FROM balenalib/%%BALENA_MACHINE_NAME%%-debian:latest\n\nWORKDIR /usr/src/app\n\nCOPY . ./\n\nCMD [\"bash\", \"start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  61.95kB\r\r\nStep 1/4 : FROM balenalib/%%BALENA_MACHINE_NAME%%-debian:latest",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-examples/balena-timezone",
    "repo_commit": "33d081cb283730ef540f4d0196524513204bdaed",
    "repo_id": 64894747
  },
  {
    "raw_dockerfile": "# see more about dockerfile templates here: http://docs.resin.io/deployment/docker-templates/\n# and about resin base images here: http://docs.resin.io/runtime/resin-base-images/\nFROM resin/%%RESIN_MACHINE_NAME%%-debian\n\n# install required packages\nRUN apt-get update && apt-get install -yq --no-install-recommends \\\n    bluez \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# define our working directory in the container\nWORKDIR usr/src/app\n\n# copy all files in our root to the working directory\nCOPY . ./\n\n# enable systemd init system in the container\nENV INITSYSTEM on\n\n# scan.sh will run when the container starts up on the device\nCMD [\"bash\", \"scan.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  813.1kB\r\r\nStep 1/6 : FROM resin/%%RESIN_MACHINE_NAME%%-debian",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/rpi3-bluetooth",
    "repo_commit": "15f4992fff0872dc95708c6365ec93b93cc30fde",
    "repo_id": 65276408
  },
  {
    "raw_dockerfile": "# Define a reusable argument containing the path to the go project\n# see: https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PROJECT_DIR=/go/src/github.com/resin-io/edge-node-manager\n\n# Build source using an image that has Go and Glide\nFROM billyteves/alpine-golang-glide:1.2.0 as GO\n\nARG PROJECT_DIR\n\nRUN mkdir -p $PROJECT_DIR\nCOPY . $PROJECT_DIR\nWORKDIR $PROJECT_DIR\n\n# Use Glide to install Go dependencies\nRUN glide install\n\n# Cross compile the ENM binary\nRUN env GOOS=linux GOARCH=arm go build\n\n# Debian base-image\n# See more about resin base images here: http://docs.resin.io/runtime/resin-base-images/\nFROM resin/%%RESIN_MACHINE_NAME%%-debian\n\nARG PROJECT_DIR\n\n# Disable systemd init system\nENV INITSYSTEM off\n\n# Set our working directory\nWORKDIR /usr/src/app\n\n# The raspberrypi3 requires extra packages - `bluez-firmware`\nENV EXTRA_PACKAGES \"\"\nRUN if [ \"%%RESIN_MACHINE_NAME%%\" = \"raspberrypi3\" ]; then export EXTRA_PACKAGES=\"bluez-firmware\"; fi && \\\n    apt-get update && apt-get install -yq --no-install-recommends \\\n    $EXTRA_PACKAGES \\\n    bluez \\\n    curl \\\n    jq && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Copy the cross-compiled binary into the working directory\nCOPY --from=GO $PROJECT_DIR/edge-node-manager ./\n\n# The edge-node-manager will run when container starts up on the device\nCMD [\"./edge-node-manager\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  8.169MB\r\r\nStep 1/16 : ARG PROJECT_DIR=/go/src/github.com/resin-io/edge-node-manager\nStep 2/16 : FROM billyteves/alpine-golang-glide:1.2.0 as GO\n1.2.0: Pulling from billyteves/alpine-golang-glide\n627beaf3eaaf: Pulling fs layer\n3d71f971891c: Pulling fs layer\nde31c0b1a0bb: Pulling fs layer\nb88fe4e12df4: Pulling fs layer\nb3357968fce2: Pulling fs layer\n4ecc1c8ec404: Pulling fs layer\nb88fe4e12df4: Waiting\nb3357968fce2: Waiting\n627beaf3eaaf: Download complete\nde31c0b1a0bb: Download complete\n3d71f971891c: Verifying Checksum\n3d71f971891c: Download complete\nb88fe4e12df4: Download complete\n4ecc1c8ec404: Download complete\n627beaf3eaaf: Pull complete\nb3357968fce2: Verifying Checksum\nb3357968fce2: Download complete\n3d71f971891c: Pull complete\nde31c0b1a0bb: Pull complete\nb88fe4e12df4: Pull complete\nb3357968fce2: Pull complete\n4ecc1c8ec404: Pull complete\nDigest: sha256:eb2ab4bcae290efe9b53e0b822f0d6c1aeb1c97be1260aa1b031a42e7cc6875e\nStatus: Downloaded newer image for billyteves/alpine-golang-glide:1.2.0\n ---> c36724ae6dbf\nStep 3/16 : ARG PROJECT_DIR\n ---> Running in cee390245f49\nRemoving intermediate container cee390245f49\n ---> 2fbb94d5a417\nStep 4/16 : RUN mkdir -p $PROJECT_DIR\n ---> Running in 475564155e7f\nRemoving intermediate container 475564155e7f\n ---> b7b837a3ede2\nStep 5/16 : COPY . $PROJECT_DIR\n ---> 43cfbf3bf029\nStep 6/16 : WORKDIR $PROJECT_DIR\nRemoving intermediate container 414ca0a64331\n ---> 889680cf1324\nStep 7/16 : RUN glide install\n ---> Running in a23c70fe9fc2\n\u001b[91m\u001b[0;32m[INFO]\t\u001b[mDownloading dependencies. Please wait...\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/asdine/storm.\n\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/dsnet/compress.\n\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/miekg/dns.\n\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/nwaples/rardecode.\n\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/mgutz/ansi.\n\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/jmoiron/jsonq.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/gorilla/context.\n\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/mattn/go-colorable.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/grandcat/zeroconf.\n\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/boltdb/bolt.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/mattn/go-isatty.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/gorilla/mux.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/currantlabs/ble.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/cenkalti/backoff.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/fredli74/lockfile.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/mgutz/logxi.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/mholt/archiver.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/cavaliercoder/grab.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/moul/http2curl.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/godbus/dbus.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/parnurzeal/gorequest.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/pkg/errors.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/Sirupsen/logrus.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/ulikunitz/xz.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching github.com/verybluebot/tarinator-go.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching golang.org/x/net.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Fetching golang.org/x/sys.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[mSetting references.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/godbus/dbus to b038411ec341afd52c6d36d8baae92a29e6e8a9e.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/mgutz/ansi to 9520e82c474b0a04dd04f8a40959027271bab992.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/mattn/go-isatty to 57fdcb988a5c543893cc61bce354a6e24ab70022.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/jmoiron/jsonq to e874b168d07ecc7808bc950a17998a8aa3141d82.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/mattn/go-colorable to a392f450ea64cee2b268dfaacdc2502b50a22b18.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/mholt/archiver to cdc68dd1f170b8dfc1a0d2231b5bb0967ed67006.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/gorilla/mux to bcd8bc72b08df0f70df986b97f95590779502d31.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/fredli74/lockfile to ad36330923e05763a7607f623b98c383bed727e2.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/grandcat/zeroconf to 2f133dcabb8c1dc0e63ec6bb9e2c405179db3033.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/asdine/storm to 2da548c16156b3197728372bff5614033084aff5.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/dsnet/compress to b9aab3c6a04eef14c56384b4ad065e7b73438862.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/cavaliercoder/grab to e403b038e10c3c6aaf022ab0f8502bd659604140.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/gorilla/context to 08b5f424b9271eedf6f9f0ce86cb9396ed337a42.\n\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/currantlabs/ble to 0ebf31a6e39ffff68e811e0f139689f1ef81addc.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/miekg/dns to e4205768578dc90c2669e75a2f8a8bf77e3083a4.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/mgutz/logxi to aebf8a7d67ab4625e0fd4a665766fef9a709161b.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/boltdb/bolt to e9cf4fae01b5a8ff89d0ec6b32f0d9c9f79aefdd.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/moul/http2curl to 4e24498b31dba4683efb9d35c1c8a91e2eda28c8.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/nwaples/rardecode to f22b7ef81a0afac9ce1447d37e5ab8e99fbd2f73.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/cenkalti/backoff to 61153c768f31ee5f130071d08fc82b85208528de.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/parnurzeal/gorequest to a578a48e8d6ca8b01a3b18314c43c6716bb5f5a3.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/pkg/errors to 645ef00459ed84a119197bfb8d8205042c6df63d.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/Sirupsen/logrus to ba1b36c82c5e05c4f912a88eab0dcd91a171688f.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/ulikunitz/xz to 3807218c9f4ed05861fa9eb75b8fb8afd3325a34.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for github.com/verybluebot/tarinator-go to f75724675c91d0c731b69c81e0985de07663f007.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for golang.org/x/net to 090ebbdfc2aff44cc6674372b72e02e731f7f0ef.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Setting version for golang.org/x/sys to d8f5ea21b9295e315e612b4bcf4bedea93454d4d.\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[mExporting resolved dependencies...\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/asdine/storm\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/boltdb/bolt\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/cavaliercoder/grab\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/cenkalti/backoff\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/currantlabs/ble\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/dsnet/compress\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/fredli74/lockfile\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/godbus/dbus\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/gorilla/context\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/gorilla/mux\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/grandcat/zeroconf\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/jmoiron/jsonq\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/mattn/go-isatty\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/mattn/go-colorable\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/mgutz/ansi\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/mgutz/logxi\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/mholt/archiver\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/miekg/dns\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/moul/http2curl\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/nwaples/rardecode\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/parnurzeal/gorequest\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/pkg/errors\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/Sirupsen/logrus\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/ulikunitz/xz\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting github.com/verybluebot/tarinator-go\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting golang.org/x/sys\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[m--> Exporting golang.org/x/net\n\u001b[0m\u001b[91m\u001b[0;32m[INFO]\t\u001b[mReplacing existing vendor dependencies\n\u001b[0mRemoving intermediate container a23c70fe9fc2\n ---> 3ce20d8ca96d\nStep 8/16 : RUN env GOOS=linux GOARCH=arm go build\n ---> Running in 2d6c91284408\nRemoving intermediate container 2d6c91284408\n ---> 3cbfb2084f4e\nStep 9/16 : FROM resin/%%RESIN_MACHINE_NAME%%-debian",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io/edge-node-manager",
    "repo_commit": "5b5b0de8e5e9e083b81aabcf3159ce310746432d",
    "repo_id": 65510883
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-debian:latest\n\nWORKDIR /usr/src/app\nENV INITSYSTEM on\n\n# Install bridging depeendencies\nRUN apt-get update && \\\n    apt-get install -yq --no-install-recommends \\\n      parprouted dhcp-helper avahi-daemon \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Copy relevant scripts\nCOPY conf/dhcp-helper /etc/default/dhcp-helper\nCOPY conf/avahi-daemon.conf /etc/avahi/avahi-daemon.conf\nCOPY start.sh ./\n\nCMD [\"bash\", \"start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  62.98kB\r\r\nStep 1/8 : FROM resin/%%RESIN_MACHINE_NAME%%-debian:latest",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/balena-bridge",
    "repo_commit": "9a6a7cf2fe0cdb3fe70136312b313f456d8f8d8c",
    "repo_id": 78559795
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-node:8\n\n# Install other apt deps\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  apt-utils \\\n  clang \\\n  xserver-xorg-core \\\n  xserver-xorg-input-all \\\n  xserver-xorg-video-fbdev \\\n  xorg \\\n  libxcb-image0 \\\n  libxcb-util0 \\\n  xdg-utils \\\n  libdbus-1-dev \\\n  libgtk2.0-dev \\\n  libnotify-dev \\\n  libgnome-keyring-dev \\\n  libgconf2-dev \\\n  libasound2-dev \\\n  libcap-dev \\\n  libcups2-dev \\\n  libxtst-dev \\\n  libxss1 \\\n  libnss3-dev \\\n  libsmbclient \\\n  libssh-4 \\\n  fbset \\\n  libexpat-dev && rm -rf /var/lib/apt/lists/*\n\nRUN echo \"#!/bin/bash\" > /etc/X11/xinit/xserverrc \\\n  && echo \"\" >> /etc/X11/xinit/xserverrc \\\n  && echo 'exec /usr/bin/X -s 0 dpms -nocursor -nolisten tcp \"$@\"' >> /etc/X11/xinit/xserverrc\n\n# Move to app dir\nWORKDIR /usr/src/app\n\n# Move package.json to filesystem\nCOPY ./app/package.json ./\n\n# Install npm modules for the application\nRUN JOBS=MAX npm install --unsafe-perm --production && npm cache clean --force && \\\n  rm -rf /tmp/* && node_modules/.bin/electron-rebuild\n\n# Move app to filesystem\nCOPY ./app ./\n\n# Build react app\nRUN JOBS=MAX npm run build\n\n## uncomment if you want systemd\nENV INITSYSTEM on\n\n# Start app\nCMD [\"bash\", \"/usr/src/app/start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  1.063MB\r\r\nStep 1/10 : FROM resin/%%RESIN_MACHINE_NAME%%-node:8",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/balena-io-playground/balena-electronjs-react",
    "repo_commit": "4c290ba54745fbb16461b6b89bf0bbcab53ab245",
    "repo_id": 81009053
  },
  {
    "raw_dockerfile": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ARG_FROM\n\nMAINTAINER Team Honeycomb <bees@honeycomb.io>\n\nADD bin/ARG_ARCH/ARG_BIN /ARG_BIN\n\nUSER root:root\nENTRYPOINT [\"/ARG_BIN\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  9.458MB\r\r\nStep 1/5 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/honeycombio/honeycomb-kubernetes-agent",
    "repo_commit": "ae861e3f1a9bf094a61afdcc7b1145dd5eaee624",
    "repo_id": 81403727
  },
  {
    "raw_dockerfile": "FROM resin/%%RESIN_MACHINE_NAME%%-node\n\n# Install apt deps\nRUN apt-get clean && apt-get update && apt-get upgrade -y && apt-get install -y \\\n  wget \\\n  curl \\\n  apt-utils \\\n  build-essential \\\n  openssh-server \\\n  vim \\\n  raspberrypi-sys-mods \\\n  dnsmasq \\\n  samba \\\n  genisoimage \\\n  syslinux-common \\\n  pxelinux \\\n  && rm -rf /var/lib/apt/lists/*\n\n# We need wimtools from debian unstable, but everything else (above) should be stable only\nRUN echo \"deb http://deb.debian.org/debian sid main\" > /etc/apt/sources.list.d/debian-unstable.list \\\n && echo 'APT::Default-Release \"testing\";' > /etc/apt/apt.conf.d/default \\\n && apt-get update && apt-get install -y -t unstable wimtools \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /etc/apt/sources.list.d/debian-unstable.list\n\n# mkwinpeimg requires mkisofs, but for licensing reasons debian instead ships genisoimage\nRUN ln -s /usr/bin/genisoimage /usr/local/bin/mkisofs\n\n# Configure openssh\nRUN mkdir /var/run/sshd \\\n && echo 'root:resin' | chpasswd \\\n && sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config \\\n && sed -i 's/UsePAM yes/UsePAM no/' /etc/ssh/sshd_config\n\n# Set up DHCP, TFTP, Samba and PXE\nCOPY dnsmasq.conf /etc/dnsmasq.conf\nCOPY smb.conf /etc/samba/smb.conf\nRUN mkdir -p /data/tftp/syslinux \\\n && cp /usr/lib/syslinux/modules/bios/* /data/tftp/syslinux/ \\\n && cp /usr/lib/syslinux/memdisk /data/tftp/ \\\n && cp /usr/lib/PXELINUX/pxelinux.0 /data/tftp/\n\n# App setup\nWORKDIR /usr/src/app\nCOPY app ./\n\n# Move to /\nWORKDIR /\n\nENV INITSYSTEM on\n\n# Start app\nCMD [\"bash\", \"/usr/src/app/start.sh\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  99.84kB\r\r\nStep 1/13 : FROM resin/%%RESIN_MACHINE_NAME%%-node",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/pimterry/rpi-pxe-server",
    "repo_commit": "ddf0900cc3d5097b181458667476703a40cce4ac",
    "repo_id": 81645357
  },
  {
    "raw_dockerfile": "# Copyright 2017 by the contributors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nFROM ARG_FROM\n\nMAINTAINER Joe Beda <joe@heptio.com>\n\nADD bin/ARG_ARCH/ARG_BIN /ARG_BIN\n\nRUN apk update && apk add ca-certificates && rm -rf /var/cache/apk/*\n\nUSER nobody:nobody\nENTRYPOINT [\"/ARG_BIN\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  9.985MB\r\r\nStep 1/6 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/heptiolabs/sign-off-checker",
    "repo_commit": "b0981269b681b4ec1106cc075f5d52477e4d2914",
    "repo_id": 81892969
  },
  {
    "raw_dockerfile": "#\n#  Globality autogenerated Docker configuration\n#\n#  This file is auto generated with globality-build.\n#  You should not make any changes to this file manually\n#\n#  Any changes made to this file will be overwritten in the\n#  next version of the build.\n#\n#  See: http://github.com/globality-corp/globality-build\n#\n#\n\n\nFROM <REPO>/python-library:base-<SHA1>\n\n# Setup invocation\n#\n# We expose the application on the standard HTTP port and use an entrypoint\n# to customize the `dev` and `test` targets.\n\nENV NAME logging_format\nCOPY README.md entrypoint.sh /src/\nENTRYPOINT [\"./entrypoint.sh\"]\n\n# Install source\n#\n# We should not need to reinstall dependencies here, but we do need to import\n# the distribution properly. We also save build arguments to the image using\n# microcosm-compatible environment variables.\n\n\nARG BUILD_NUM\nARG SHA1\nENV FLAKE8-LOGGING-FORMAT__BUILD_INFO_CONVENTION__BUILD_NUM ${BUILD_NUM}\nENV FLAKE8-LOGGING-FORMAT__BUILD_INFO_CONVENTION__SHA1 ${SHA1}\nCOPY $NAME /src/$NAME/\nRUN pip install --extra-index-url $EXTRA_INDEX_URL -e .",
    "raw_stdout_log": "Sending build context to Docker daemon  29.18kB\r\r\nStep 1/10 : FROM <REPO>/python-library:base-<SHA1>",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/globality-corp/flake8-logging-format",
    "repo_commit": "3c6ce53d0ff1ec369799cff0ed6d048343252e40",
    "repo_id": 88560488
  },
  {
    "raw_dockerfile": "# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM ARG_FROM\n\nMAINTAINER Michael Taufen <mtaufen@google.com>\n\nADD bin/ARG_ARCH/ARG_BIN /ARG_BIN\n\nENTRYPOINT [\"/ARG_BIN\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  7.895MB\r\r\nStep 1/4 : FROM ARG_FROM",
    "raw_stderr_log": "invalid reference format: repository name must be lowercase",
    "html_url": "https://github.com/kubernetes-sigs/ip-masq-agent",
    "repo_commit": "83d8fe820435ac4c6b045a597d993ddee2983d1f",
    "repo_id": 91118324
  }
]