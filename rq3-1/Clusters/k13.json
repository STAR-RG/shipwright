[
  {
    "raw_dockerfile": "FROM opensuse:latest\n\n# Make sure we do not spend time preparing the OS\n# while the installation sources are not mounted.\nRUN test -f /var/tmp/ABAP_Trial/install.sh\n\n# General information\nLABEL de.itsfullofstars.sapnwdocker.version=\"1.0.0-filak-sap-2\"\nLABEL de.itsfullofstars.sapnwdocker.vendor=\"Tobias Hofmann\"\nLABEL de.itsfullofstars.sapnwdocker.name=\"Docker for SAP NetWeaver 7.5x Developer Edition\"\nLABEL modified_by=\"Jakub Filak <jakub.filak@sap.com>\"\n\nLABEL flags_run=\"docker run -d -v /sys/fs/cgroup:/sys/fs/cgroup:ro --privileged -p 3200:3200 -p 3300:3300 -p 8000:8000 -p 44300:44300 -h vhcalnplci --name abaptrial\"\nLABEL installation_size=\"50\"\nLABEL thinpool_size=\"80\"\nLABEL base_size=\"65\"\nLABEL memory=\"4GB\"\n\nLABEL sid=\"npl\"\nLABEL dbpassword=\"S3cr3tP@ssw0rd\"\nLABEL sapusers=\"DDIC,SAP*,DEVELOPER\"\nLABEL sappassword=\"Down1oad\"\n\nENV container docker\n\n# Install dependencies and configure systemd to start only the services we\n# need!\nRUN zypper refresh -y; zypper dup -y; \\\nzypper --non-interactive install --replacefiles  systemd uuidd expect tcsh which iputils vim hostname tar net-tools iproute2 curl python-openssl python-pip; \\\nzypper clean; \\\n(cd /usr/lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \\\nrm -f /usr/lib/systemd/system/multi-user.target.wants/*;\\\nrm -f /etc/systemd/system/*.wants/*;\\\nrm -f /usr/lib/systemd/system/local-fs.target.wants/*; \\\nrm -f /usr/lib/systemd/system/sockets.target.wants/*udev*; \\\nrm -f /usr/lib/systemd/system/sockets.target.wants/*initctl*; \\\nrm -f /usr/lib/systemd/system/basic.target.wants/*;\\\nrm -f /usr/lib/systemd/system/anaconda.target.wants/*;\n\n# We need to start the container with cgroups:\n# $ docker run -v /sys/fs/cgroup:/sys/fs/cgroup:ro ...\nVOLUME [ \"/sys/fs/cgroup\" ]\n\n# Wrap the command startsap in a systemd service, so we do not need to log in\n# to the container and start it manually.\nCOPY nwabap.service /etc/systemd/system\n\n# Avoid the need to start uuidd manually.\n# BTW, uuidd is not needed for the installation.\nRUN systemctl enable nwabap uuidd\n\n# Copy trusted server certificates\nRUN mkdir -p /etc/pki/ca-trust/source/SAP\nCOPY files/certs/*.cer /etc/pki/ca-trust/source/SAP/\n\n# Install PyRFC\nRUN pip install --upgrade pip\nRUN cd /var/tmp && curl -LO https://github.com/SAP/PyRFC/raw/master/dist/pyrfc-1.9.93-cp27-cp27mu-linux_x86_64.whl && \\\n    pip install /var/tmp/pyrfc-1.9.93-cp27-cp27mu-linux_x86_64.whl && rm -f /var/tmp/pyrfc-1.9.93-cp27-cp27mu-linux_x86_64.whl\n\n# Install the utility for adding trusted certs over RFC\nCOPY utils/src/sap_add_trusted_server_cert /usr/local/bin\n\n# Add the installer expect\nCOPY utils/src/install.expect /usr/local/bin\n\nRUN mkdir /usr/local/bin/mock\nCOPY utils/src/mock/sysctl /usr/local/bin/mock\n\n# HOSTNAME is imbued into SAP stuff - so we must convince the installer\n# to use the well known HOSTNAME.\n# And we have to try really hard, so don't forget to start docker build with:\n#\n# -v $PWD/mock_hostname/ld.so.preload\n# -v $PWD/mock_hostname/libmockhostname.so:/usr/local/lib64/libmockhostname.so\n#\n# In case you want to know what the library does:\n#   https://github.com/jfilak/snippets/tree/master/mock_hostname\n#\n# Note: Password being used is S3cr3tP@ssw0rd\nRUN  echo $(grep $(uname -n) /etc/hosts | cut -f1 -d$'\\t')  \"vhcalnplci\" >> /etc/hosts; \\\n     export HOSTNAME=\"vhcalnplci\"; \\\n     echo $HOSTNAME > /etc/hostname; \\\n     echo \"export HOSTNAME=$HOSTNAME\" >> /etc/profile; \\\n     test $(hostname) == $HOSTNAME || exit 1; \\\n     export SAP_LOG_FILE=\"/var/tmp/abap_trial_install.log\"; \\\n     export PATH=/usr/local/bin/mock:$PATH; \\\n     (/usr/local/bin/install.expect --password \"S3cr3tP@ssw0rd\" --accept-SAP-developer-license || exit 1; \\\n       (export LD_LIBRARY_PATH=/sapmnt/NPL/exe/uc/linuxx86_64; \\\n        python /usr/local/bin/sap_add_trusted_server_cert -v /etc/pki/ca-trust/source/SAP/*.cer); \\\n      su - npladm -c \"stopsap ALL\")\n\n# Persist database\n# VOLUME [ \"/sybase/NPL/sapdata_1\" ]\n\n# Here it comes, start your containers without the need to attach/exec and\n# start SAP processes manually.\n#\n# Do not forget to bind mount cgroups:\n# -v /sys/fs/cgroup:/sys/fs/cgroup:ro\n#\nENTRYPOINT [\"/usr/lib/systemd/systemd\", \"--system\"]\n\n# Command sequence to use this Dockerfile\n\n# Before you start, please, configured docker to use devicemapper and set dm.basesize to 60G.\n#\n# $ docker daemon --storage-opt dm.basesize=60\n\n# To avoid the need to copy the installation files (10s of GBs), mount the directory with\n# installation files to /var/tmp/SAPTestDrive.\n\n# Finally, run the build command.\n#\n# $ docker build \\\n#    -v $PWD/NW751:/var/tmp/ABAP_Trial \\\n#    -v $PWD/mock_hostname/ld.so.preload:/etc/ld.so.preload \\\n#    -v $PWD/mock_hostname/libmockhostname.so:/usr/local/lib64/libmockhostname.so \\\n#    -t abaptrial:752 .\n#\n# When built, you can start it this way:\n#\n# $ docker run -d -v /sys/fs/cgroup:/sys/fs/cgroup:ro --privileged \\\n#   -p 3200:3200 -p 3300:3300 -p 8000:8000 -p 44300:44300 \\\n#   --hostname vhcalnplci --name abaptrial abaptrial:752\n#\n# Tips: you can leave out all the -p arguments and connect to SAP processes\n# using the internal IP of the container. Run the following command to get the IP:\n#\n# $ docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' abaptrial",
    "raw_stdout_log": "Sending build context to Docker daemon  617.5kB\r\r\nStep 1/30 : FROM opensuse:latest",
    "raw_stderr_log": "manifest for opensuse:latest not found",
    "html_url": "https://github.com/filak-sap/sap-nw-abap-docker",
    "repo_commit": "8c727822fb3e25a92f11b5ca2cf15bba962adc5b",
    "repo_id": 126508444
  },
  {
    "raw_dockerfile": "FROM microsoft/windowsservercore\r\n\r\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop';\"]\r\n\r\n# Copy and install LabVIEW 2018 runtime\r\nCOPY ./LV2018/ /build/LV2018\r\n\r\nRUN Start-Process msiexec.exe -ArgumentList '/i', 'C:\\build\\LV2018\\LV2018runtime.msi', '/quiet', '/norestart' -NoNewWindow -Wait\r\nRUN Start-Process msiexec.exe -ArgumentList '/i', 'C:\\build\\LV2018\\LV2018rtdnet.msi', '/quiet', '/norestart' -NoNewWindow -Wait\r\nRUN Start-Process msiexec.exe -ArgumentList '/i', 'C:\\build\\LV2018\\lvrteres\\LV2018rteres.msi', '/quiet', '/norestart' -NoNewWindow -Wait",
    "raw_stdout_log": "Sending build context to Docker daemon  104.8MB\r\r\nStep 1/6 : FROM microsoft/windowsservercore",
    "raw_stderr_log": "manifest for microsoft/windowsservercore:latest not found",
    "html_url": "https://github.com/JohnStratoudakis/LabVIEW_Docker",
    "repo_commit": "9a79150fa9ee9a1a848b1ea069e8b2e9cfea96ca",
    "repo_id": 128853094
  },
  {
    "raw_dockerfile": "# escape=`\nFROM microsoft/windowsservercore\n\nENV GOVERSION 1.12.10\nENV DEPVERSION v0.4.1\nENV DOCKER_VERSION 19.03.3\n\nENV chocolateyUseWindowsCompression false\nRUN powershell iex(iwr -useb https://chocolatey.org/install.ps1)\nRUN choco feature disable --name showDownloadProgress\nRUN choco install -y golang -version %GOVERSION%\nRUN choco install -y git\nRUN choco install -y mingw\n\nENV GOPATH C:\\gopath\nRUN git clone -q --branch=v%DOCKER_VERSION% --single-branch https://github.com/docker/cli.git C:\\gopath\\src\\github.com\\docker\\cli\nWORKDIR C:\\gopath\\src\\github.com\\docker\\cli\nRUN setx VERSION \"%DOCKER_VERSION%\"\nRUN powershell -File .\\scripts\\make.ps1 -Binary\nRUN dir C:\\gopath\\src\\github.com\\docker\\cli\\build\\docker.exe",
    "raw_stdout_log": "Sending build context to Docker daemon  101.9kB\r\r\nStep 1/16 : FROM microsoft/windowsservercore",
    "raw_stderr_log": "manifest for microsoft/windowsservercore:latest not found",
    "html_url": "https://github.com/StefanScherer/docker-cli-builder",
    "repo_commit": "50abdd7bf9a7e34239ae1adfc17f390953a16c7d",
    "repo_id": 145282645
  },
  {
    "raw_dockerfile": "FROM openfpgaduino/openfpgaduino\nMAINTAINER Zhizhou Li <lzz@meteroi.com>\nENV PATH  /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/gcc/bin:/altera/14.1/quartus/bin:/altera/14.1/quartus/sopc_builder/bin\nRUN git clone --recursive https://github.com/OpenFPGAduino/OpenFPGAduino.git\nRUN cd OpenFPGAduino; ./configure; make clean; make",
    "raw_stdout_log": "Sending build context to Docker daemon  320.5kB\r\r\nStep 1/5 : FROM openfpgaduino/openfpgaduino",
    "raw_stderr_log": "manifest for openfpgaduino/openfpgaduino:latest not found",
    "html_url": "https://github.com/OpenFPGAduino/OpenFPGAduino",
    "repo_commit": "d573161a9e2beb9905ebd47b61cde9255b011014",
    "repo_id": 29081614
  },
  {
    "raw_dockerfile": "FROM tpm2software/tpm2-tss AS base\n\nCOPY . /tmp/tpm2-tss/\nWORKDIR /tmp/tpm2-tss\nENV LD_LIBRARY_PATH /usr/local/lib\n\n# Install libjson-c\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n       libjson-c-dev \\\n       && rm -rf /var/lib/apt/lists/*\n\n# Fuzzing\nFROM base AS fuzzing\nENV GEN_FUZZ 1\nRUN ./bootstrap \\\n  && ./configure \\\n     CC=clang \\\n     CXX=clang++ \\\n     --enable-debug \\\n     --with-fuzzing=libfuzzer \\\n     --enable-tcti-fuzzing \\\n     --enable-tcti-device=no \\\n     --enable-tcti-mssim=no \\\n     --with-maxloglevel=none \\\n     --disable-shared \\\n  && make -j $(nproc) check\nRUN cat test-suite.log\n\n# TPM2-TSS\nFROM base\nRUN ./bootstrap \\\n\t&& ./configure --enable-unit \\\n\t&& make -j$(nproc) check \\\n\t&& make install \\\n\t&& ldconfig\nRUN cat test-suite.log",
    "raw_stdout_log": "Sending build context to Docker daemon  30.58MB\r\r\nStep 1/12 : FROM tpm2software/tpm2-tss AS base",
    "raw_stderr_log": "manifest for tpm2software/tpm2-tss:latest not found",
    "html_url": "https://github.com/tpm2-software/tpm2-tss",
    "repo_commit": "e00973bc376bcc08d6c053b21959dee1f39ed1e3",
    "repo_id": 38320020
  },
  {
    "raw_dockerfile": "FROM opensuse:leap\n\nRUN \\\n  zypper ref && \\\n  zypper -n -q install nodejs-npm git && \\\n  git config --global http.sslVerify false && \\\n  git clone https://github.com/heymind/url2leanote.git /app && \\\n  cd app && \\\n  npm install && \\\n  npm install supervisor -g\n# RUN find /app\nWORKDIR /app\nEXPOSE 8080\nCMD supervisor /app/app.js",
    "raw_stdout_log": "Sending build context to Docker daemon   89.6kB\r\r\nStep 1/5 : FROM opensuse:leap",
    "raw_stderr_log": "manifest for opensuse:leap not found",
    "html_url": "https://github.com/heymind/url2leanote",
    "repo_commit": "f5727f7f8aff08f3a803123e2f479cc2df91d08a",
    "repo_id": 51129335
  },
  {
    "raw_dockerfile": "# CosmosDB Emulator Dockerfile\n\n# Indicates that the windowsservercore image will be used as the base image.\nFROM microsoft/windowsservercore\n\n# Metadata indicating an image maintainer.\nMAINTAINER mominag@microsoft.com\n\n# Add the CosmosDB installer msi into the package\nADD https://aka.ms/cosmosdb-emulator c:\\\\CosmosDBEmulator\\\\AzureCosmosDB.Emulator.msi\n\n# Copy misc scripts into the package\nCOPY package_scripts\\\\startemu.cmd c:\\\\CosmosDBEmulator\\\\startemu.cmd\nCOPY package_scripts\\\\getaddr.ps1 c:\\\\CosmosDBEmulator\\\\getaddr.ps1\nCOPY package_scripts\\\\exportcert.ps1 c:\\\\CosmosDBEmulator\\\\exportcert.ps1\nCOPY package_scripts\\\\importcert.ps1 c:\\\\CosmosDBEmulator\\\\importcert.ps1\n\n# Install the MSI\nRUN echo \"Starting Installer\"\nRUN powershell.exe -Command $ErrorActionPreference = 'Stop'; \\\n   Start-Process 'msiexec.exe' -ArgumentList '/i','c:\\CosmosDBEmulator\\AzureCosmosDB.Emulator.msi','/qn' -Wait\nRUN echo \"Installer Done\"\n\n# Expose the required network ports\nEXPOSE 8081\nEXPOSE 8901\nEXPOSE 8902\nEXPOSE 10250\nEXPOSE 10251\nEXPOSE 10252\nEXPOSE 10253\nEXPOSE 10254\nEXPOSE 10255\nEXPOSE 10350\n\n# Start the interactive shell\nCMD [ \"c:\\\\CosmosDBEmulator\\\\startemu.cmd\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  86.02kB\r\r\nStep 1/21 : FROM microsoft/windowsservercore",
    "raw_stderr_log": "manifest for microsoft/windowsservercore:latest not found",
    "html_url": "https://github.com/Azure/azure-cosmos-db-emulator-docker",
    "repo_commit": "78153a6bf97ee9dc617ba8a76cee6e7f24652026",
    "repo_id": 87481074
  },
  {
    "raw_dockerfile": "FROM opensuse:leap\n\nRUN zypper -n install osc-plugin-install vim curl bsdtar git sudo pcre-tools\nRUN curl -OkL https://download.opensuse.org/repositories/openSUSE:Tools/openSUSE_42.3/openSUSE:Tools.repo\nRUN zypper -n addrepo openSUSE:Tools.repo\nRUN zypper --gpg-auto-import-keys refresh\nRUN zypper -n install build \\\n    obs-service-tar_scm \\\n    obs-service-verify_file \\\n    obs-service-obs_scm \\\n    obs-service-recompress \\\n    obs-service-download_url",
    "raw_stdout_log": "Sending build context to Docker daemon  965.6kB\r\r\nStep 1/6 : FROM opensuse:leap",
    "raw_stderr_log": "manifest for opensuse:leap not found",
    "html_url": "https://github.com/clearcontainers/packaging",
    "repo_commit": "dde2e40c8f8fe77cf8409ac66ede5b2b87da412f",
    "repo_id": 94353569
  }
]