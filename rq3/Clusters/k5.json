[
  {
    "raw_dockerfile": "# Builder\nFROM arm32v7/golang as builder\n\nMAINTAINER Ondřej Záruba <info@zaruba-ondrej.cz> (https://zaruba-ondrej.cz)\n\nENV CADVISOR_VERSION \"v0.30.2\"\n\nRUN apt-get update && apt-get install -y git dmsetup && apt-get clean\n\nRUN git clone --branch ${CADVISOR_VERSION} https://github.com/google/cadvisor.git /go/src/github.com/google/cadvisor\n\nWORKDIR /go/src/github.com/google/cadvisor\n\nRUN make build\n\n# Image for usage\nFROM arm32v7/debian\n\nMAINTAINER Ondřej Záruba <info@zaruba-ondrej.cz> (https://zaruba-ondrej.cz)\n\nCOPY --from=builder /go/src/github.com/google/cadvisor/cadvisor /usr/bin/cadvisor\n\nEXPOSE 8080\nENTRYPOINT [\"/usr/bin/cadvisor\", \"-logtostderr\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  66.56kB\r\r\nStep 1/12 : FROM arm32v7/golang as builder\nlatest: Pulling from arm32v7/golang",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/Budry/cadvisor-arm",
    "repo_commit": "6b4d7c64fdd83e6ad63883ea825a6be3e4703f04",
    "repo_id": 112238686
  },
  {
    "raw_dockerfile": "# escape=`\n\n# NOTE: use 'process' isolation to build image (otherwise rhino fails to install)\n\n### builder image\nFROM mcr.microsoft.com/dotnet/framework/sdk:4.8 as builder\n\n# copy everything, restore nuget packages and build app\nCOPY src/ ./src/\nRUN msbuild /p:Configuration=Release /restore src/compute.sln\n\n### main image\nFROM mcr.microsoft.com/windows:1903\nSHELL [\"powershell\", \"-Command\"]\n\n# install rhino (with “-package -quiet” args)\n# NOTE: edit this if you use a different version of rhino!\nADD http://files.mcneel.com/dujour/exe/20200324/rhino_en-us_7.0.20084.11445.exe rhino_installer.exe\nRUN Start-Process .\\rhino_installer.exe -ArgumentList '-package', '-quiet' -NoNewWindow -Wait\nRUN Remove-Item .\\rhino_installer.exe\n\n# setup cloudzoo auth\n# NOTE: switch on CloudZooPlainText and copy 55500d41-3a41-4474-99b3-684032a4f4df.lic,\n#       cloudzoo.json and settings-Scheme__Default.xml to the working dir\nCOPY [\"55500d41-3a41-4474-99b3-684032a4f4df.lic\", \"C:/ProgramData/McNeel/Rhinoceros/6.0/License Manager/Licenses/\"]\nCOPY [\"cloudzoo.json\", \"C:/Users/ContainerAdministrator/AppData/Roaming/McNeel/Rhinoceros/6.0/License Manager/Licenses/\"]\nCOPY [\"settings-Scheme__Default.xml\", \"C:/Users/ContainerAdministrator/AppData/Roaming/McNeel/Rhinoceros/7.0/settings/\"]\n\nCOPY --from=builder [\"/src/bin/Release\", \"/app\"]\n\nWORKDIR /app\n\nEXPOSE 80\n\nCMD [\"compute.frontend.exe\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  1.972MB\r\r\nStep 1/15 : FROM mcr.microsoft.com/dotnet/framework/sdk:4.8 as builder\n4.8: Pulling from dotnet/framework/sdk",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/mcneel/compute.rhino3d",
    "repo_commit": "864067c87caacac292e767a18338f2bd2e274df0",
    "repo_id": 119090587
  },
  {
    "raw_dockerfile": "# Copyright 2020 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM mcr.microsoft.com/windows/servercore:1809 as core\n\nFROM mcr.microsoft.com/windows/nanoserver:1809\nCOPY --from=core /Windows/System32/netapi32.dll /Windows/System32/netapi32.dll\nCOPY bin/azure-cloud-node-manager.exe /cloud-node-manager.exe\nUSER ContainerAdministrator\nENTRYPOINT [\"/azure-cloud-node-manager.exe\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  100.4MB\r\r\nStep 1/6 : FROM mcr.microsoft.com/windows/servercore:1809 as core\n1809: Pulling from windows/servercore",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/kubernetes-sigs/cloud-provider-azure",
    "repo_commit": "d72ca1f471e29cdbc9959bea0c21e2ef645ca78e",
    "repo_id": 126132964
  },
  {
    "raw_dockerfile": "FROM arm64v8/golang:1.14 AS binarybuilder\nRUN apk --no-cache --no-progress add --virtual \\\n  build-deps \\\n  build-base \\\n  git \\\n  linux-pam-dev\n\nWORKDIR /gogs.io/gogs\nCOPY . .\nRUN make build-no-gen TAGS=\"cert pam\"\n\nFROM arm64v8/alpine:3.11\nADD https://github.com/tianon/gosu/releases/download/1.11/gosu-arm64 /usr/sbin/gosu\nRUN chmod +x /usr/sbin/gosu \\\n  && echo http://dl-2.alpinelinux.org/alpine/edge/community/ >> /etc/apk/repositories \\\n  && apk --no-cache --no-progress add \\\n  bash \\\n  ca-certificates \\\n  curl \\\n  git \\\n  linux-pam \\\n  openssh \\\n  s6 \\\n  shadow \\\n  socat \\\n  tzdata \\\n  rsync\n\nENV GOGS_CUSTOM /data/gogs\n\n# Configure LibC Name Service\nCOPY docker/nsswitch.conf /etc/nsswitch.conf\n\nWORKDIR /app/gogs\nCOPY docker ./docker\nCOPY --from=binarybuilder /gogs.io/gogs/gogs .\n\nRUN ./docker/finalize.sh\n\n# Configure Docker Container\nVOLUME [\"/data\"]\nEXPOSE 22 3000\nENTRYPOINT [\"/app/gogs/docker/start.sh\"]\nCMD [\"/bin/s6-svscan\", \"/app/gogs/docker/s6/\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  246.6MB\r\r\nStep 1/18 : FROM arm64v8/golang:1.14 AS binarybuilder\n1.14: Pulling from arm64v8/golang",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/gogs/gogs",
    "repo_commit": "82ffca3fc9988345016c8033f7f65c5b028dfe10",
    "repo_id": 16752620
  },
  {
    "raw_dockerfile": "FROM mcr.microsoft.com/windows:1809 AS makeiso\nWORKDIR C:/source\nCOPY . .\nRUN powershell -NoProfile -ExecutionPolicy unrestricted -file make_unattend_iso.ps1\n\nFROM mcr.microsoft.com/windows/servercore:ltsc2019\nENV chocolateyUseWindowsCompression false\n\nRUN powershell -NoProfile -ExecutionPolicy unrestricted -Command \\\n    iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')); \\\n    choco feature disable --name showDownloadProgress\nRUN choco install -y packer\nRUN powershell -Command Install-WindowsFeature Hyper-V-PowerShell\nCOPY --from=makeiso C:/source C:/source\nWORKDIR C:/source\nRUN powershell -File test.ps1",
    "raw_stdout_log": "Sending build context to Docker daemon  2.828MB\r\r\nStep 1/12 : FROM mcr.microsoft.com/windows:1809 AS makeiso\n1809: Pulling from windows",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/StefanScherer/packer-windows",
    "repo_commit": "2aa6d2861b1b9d3c800bd01d9113275231891d85",
    "repo_id": 16849773
  },
  {
    "raw_dockerfile": "ARG EMSDK_VERSION\nFROM trzeci/emscripten:sdk-tag-${EMSDK_VERSION}-64bit\n\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y \\\n    bison \\\n    && rm -rf /var/lib/apt/lists/*\n\n# build brotli (version in apt is too old)\nRUN git clone --depth 1 https://github.com/google/brotli.git --branch master --single-branch \\\n    && cd brotli \\\n    && mkdir out && cd out \\\n    && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr .. \\\n    && cmake --build . --config Release --target install \\\n    && cd ../.. && rm -rf brotli",
    "raw_stdout_log": "Sending build context to Docker daemon  3.654MB\r\r\nStep 1/5 : ARG EMSDK_VERSION\nStep 2/5 : FROM trzeci/emscripten:sdk-tag-${EMSDK_VERSION}-64bit",
    "raw_stderr_log": "manifest for trzeci/emscripten:sdk-tag--64bit not found",
    "html_url": "https://github.com/kainino0x/glslang.js",
    "repo_commit": "2ff5b5dcdc285a8dc6446e822ed2179bc391dacb",
    "repo_id": 200969335
  },
  {
    "raw_dockerfile": "# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# IMAGE BUILD\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# base image\n# myrtille works with all versions of Windows (desktop and server), starting from Windows 7 and Windows Server 2008; choose the base image you want to use (size may vary)\n# the myrtille installer will anyway install the roles and features required by myrtille (see Install.ps1), if they are not already installed on the base image\nFROM mcr.microsoft.com/windows/servercore:ltsc2019\n#FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8\n#FROM mcr.microsoft.com/windows:1909\n\n# copy the installer into the container\nADD myrtille.msi /myrtille.msi\n\n# run the installer within the container\n# passing params to msiexec to override the default settings of the installer doesn't work; the custom actions just ignore them\n# TODO: dig this issue, maybe use orca to change that unwanted behavior?\n#RUN msiexec /i myrtille.msi /quiet PDFPRINTER=\"\"\nRUN msiexec /i myrtille.msi /quiet\n  \n# open http and https ports on the container\nEXPOSE 80\nEXPOSE 443\n\n# entry point\nSHELL [\"powershell\"]\nRUN Invoke-WebRequest -UseBasicParsing -Uri 'https://dotnetbinaries.blob.core.windows.net/servicemonitor/2.0.1.6/ServiceMonitor.exe' -OutFile 'C:\\ServiceMonitor.exe'\nENTRYPOINT [\"C:\\\\ServiceMonitor.exe\", \"w3svc\"]\n\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# NOTES AND LIMITATIONS\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# Docker must be configured to use Windows containers, with Hyper-V isolation (see https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-containers/hyperv-container)\n# if you want to run Docker within a VM, you will need to enable nested virtualization with Hyper-V (see https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/nested-virtualization)\n# the host can be Windows 10 Pro or Windows Server 2016 or greater\n\n# printer and audio redirection through RDP is not supported by Windows containers at the moment\n# the myrtille installer used by this Dockerfile must be built with the PDF printer option unchecked\n\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# DATA PERSISTENCE\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# the myrtille image will use the default settings, empty database and logs\n# every new container based on it will have the same default settings, empty database and logs\n\n# if you intend to have custom settings, manage your hosts or keep track of the logs, you can (non-exhaustively):\n# - create a Dockerfile with myrtille as a base image and copy your modified files over the original ones (replacing them)\n# - commit a modified container into a new image (i.e.: \"myrtille_custom\") that will be your new image reference\n\n# the 1st method is preferred because it will help you to keep track of your changes\n# this will be helpful when you want to use a newer myrtille version (using a different tag) and report these changes\n# for example, you could set the myrtille admin password (bin\\myrtille.services.exe.config, \"LocalAdminPassword\") once for all\n# regarding the hosts management, you could use an external database (bin\\myrtille.services.exe.config, \"enterpriseDBConnection\"), so that every container will share the same data\n# build your Dockerfile with a different image name (i.e.: \"myrtille_custom\")\n\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# USEFUL COMMANDS\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# IMPORTANT! if you have a ~ 15 secs delay on each Docker command under Windows, disable NETBIOS over TCP/IP on each of your network adapters (TCP/IP v4 Properties)\n# see https://github.com/docker/for-win/issues/2131#issuecomment-505286617\n\n# to list the network adapters available to Docker:\n# docker network ls\n\n# to build the myrtille image (using Docker Desktop or Toolbox), have this Dockerfile and the myrtille installer (.msi file) into a folder, move into this folder then run this command:\n# you also need to provide a network adapter able to download the service monitor during the build. Optionally, you can add a version tag to the image (useful to manage different versions of myrtille)\n# docker build --network=\"<network adapter>\" -t myrtille(:tag) .\n\n# to run an image (in detached mode) and provide the resulting container a network adapter able to connect your hosts:\n# docker run -d --network=\"<network adapter>\" <image name>(:tag)\n\n# to list the containers:\n# docker ps -a\n\n# to open a shell into a container (and be able to explore it, check its ip address, logs, etc.):\n# docker exec -it <container ID> cmd\n# docker exec -it <container ID> powershell\n\n# to stop a container:\n# docker stop <container ID>\n\n# to commit a container into a new image (and be able to persist its config, data and logs):\n# docker commit <container ID> <image name>(:tag)\n\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# DISK CLEANUP\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# after a while, you might want to clean the unused containers and images to free some space\n\n# remove all containers (powershell):\n# docker rm $ (docker ps -a -q)\n\n# remove all dangling images:\n# docker image prune\n\n# more help: https://docs.docker.com/",
    "raw_stdout_log": "Sending build context to Docker daemon  109.4MB\r\r\nStep 1/8 : FROM mcr.microsoft.com/windows/servercore:ltsc2019\nltsc2019: Pulling from windows/servercore",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/cedrozor/myrtille",
    "repo_commit": "2ee55e5e63fca89f39fb339ca8c1a4a689dd2a15",
    "repo_id": 53579345
  },
  {
    "raw_dockerfile": "FROM microsoft/aspnet\n\nCOPY [\"./Trifolia.Web/obj/Install Release/Package/PackageTmp\", \"/inetpub/wwwroot\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  1.328GB\r\r\nStep 1/2 : FROM microsoft/aspnet\nlatest: Pulling from microsoft/aspnet",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/lantanagroup/trifolia",
    "repo_commit": "8092024783fdf3e87f812a38653deb9f72b04fe1",
    "repo_id": 57306801
  },
  {
    "raw_dockerfile": "FROM microsoft/iis\n\n# Install Chocolatey\nRUN @powershell -NoProfile -ExecutionPolicy Bypass -Command \"$env:ChocolateyUseWindowsCompression='false'; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n\n# Install build tools\nRUN powershell add-windowsfeature web-asp-net45 \\\n    && choco install microsoft-build-tools -y --allow-empty-checksums -version 14.0.23107.10 \\\n    && choco install dotnet4.6-targetpack --allow-empty-checksums -y \\\n    && choco install nuget.commandline --allow-empty-checksums -y \\\n    && nuget install MSBuild.Microsoft.VisualStudio.Web.targets -Version 14.0.0.3 \\\n    && nuget install WebConfigTransformRunner -Version 1.0.0.1\n\nRUN powershell remove-item C:\\inetpub\\wwwroot\\iisstart.*\n\n# Copy files\nRUN md c:\\build\nWORKDIR c:/build\nCOPY . c:/build\n\n# Restore packages, build, copy\nRUN nuget restore \\\n    && \"c:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\MSBuild.exe\" /p:Platform=\"Any CPU\" /p:VisualStudioVersion=12.0 /p:VSToolsPath=c:\\MSBuild.Microsoft.VisualStudio.Web.targets.14.0.0.3\\tools\\VSToolsPath DockerDemo.sln \\\n    && xcopy c:\\build\\DockerDemo\\* c:\\inetpub\\wwwroot /s\n\nENTRYPOINT powershell .\\InitializeContainer",
    "raw_stdout_log": "Sending build context to Docker daemon  2.445MB\r\r\nStep 1/9 : FROM microsoft/iis\nlatest: Pulling from microsoft/iis",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/anthonychu/aspnet-4.x-docker-windows-container",
    "repo_commit": "04e57bcbbc38ac99c92c5c4785fbd46d8b02d380",
    "repo_id": 60678376
  },
  {
    "raw_dockerfile": "FROM microsoft/aspnet\n\n# setup IIS\nADD iisconfig.ps1 ./iisconfig.ps1\nRUN powershell.exe c:\\iisconfig.ps1\n\n# deploy the app\nCOPY . /app\n\n# configure the new site in\nRUN powershell -NoProfile -Command \\\n    Import-module IISAdministration; \\\n    New-IISSite -Name \"cms.umbraco.local\" -PhysicalPath \"C:\\app\" -BindingInformation \"*:8080:\" \n\n# This instruction tells the container to listen on port 8080. \nEXPOSE 8080",
    "raw_stdout_log": "Sending build context to Docker daemon  58.37kB\r\r\nStep 1/6 : FROM microsoft/aspnet\nlatest: Pulling from microsoft/aspnet",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/PhilA1/docker-umbraco",
    "repo_commit": "6990cec8ee4cab0d7a3d64471ed1d376affd83e9",
    "repo_id": 79565161
  },
  {
    "raw_dockerfile": "FROM mcr.microsoft.com/windows/servercore:1809\n\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'silentlyContinue';\"]\n\n# Install .NET Core SDK\nENV DOTNET_SDK_VERSION 3.0.100-preview5-011568\nRUN Invoke-WebRequest -OutFile dotnet.zip https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$Env:DOTNET_SDK_VERSION/dotnet-sdk-$Env:DOTNET_SDK_VERSION-win-x64.zip; \\\n    Expand-Archive dotnet.zip -DestinationPath 'C:\\Program Files\\dotnet'; \\\n    Remove-Item -Force dotnet.zip\nRUN setx /M PATH $($Env:PATH + ';' + $Env:ProgramFiles + '\\dotnet')\n\n# Install .Net SDK\nENV DOTNET_SDK_DOWNLOAD_URL https://download.visualstudio.microsoft.com/download/pr/7afca223-55d2-470a-8edc-6a1739ae3252/c8c829444416e811be84c5765ede6148/ndp48-devpack-enu.exe\nRUN Invoke-WebRequest $Env:DOTNET_SDK_DOWNLOAD_URL -OutFile DotNetSDK.exe; \\\n    start-Process DotNetSDK.exe -ArgumentList '/q' -Wait ; \\\n\tRemove-Item -Force DotNetSDK.exe\n\n# Install Windows Debugging Tools\nENV WINDBG_DOWNLOAD_URL https://download.microsoft.com/download/F/9/1/F91B5312-4385-4476-9688-055E3B1ED10F/windowssdk/winsdksetup.exe\nRUN Invoke-WebRequest $Env:WINDBG_DOWNLOAD_URL -OutFile winsdksetup.exe; \\\n    start-Process winsdksetup.exe -ArgumentList '/features OptionId.WindowsDesktopDebuggers /q' -Wait ; \\\n    Remove-Item -Force winsdksetup.exe\n\n# Install DebugDiag\nENV DEBUGDIAG_DOWNLOAD_URL https://download.microsoft.com/download/D/C/9/DC98BD0E-5A9A-4D8A-B313-22BC3604FB05/DebugDiagx64.msi\nRUN Invoke-WebRequest $Env:DEBUGDIAG_DOWNLOAD_URL -OutFile DebugDiagx64.msi; \\\n    start-Process DebugDiagx64.msi -ArgumentList '/qn' -Wait ; \\\n    Remove-Item -Force DebugDiagx64.msi\n\n# Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE skip\nRUN New-Item -Type Directory warmup; \\\n    cd warmup; \\\n    dotnet new console; \\\n    cd ..; \\\n    Remove-Item -Force -Recurse warmup\n\n# Install nodejs and bower which is used in the Prepublish Script of SuperDumpService\nENV NODEJS_DOWNLOAD_URL https://nodejs.org/dist/v10.15.3/node-v10.15.3-x64.msi\nRUN Invoke-WebRequest $Env:NODEJS_DOWNLOAD_URL -OutFile nodejs.msi; \\\n    start-Process nodejs.msi -ArgumentList '/qn' -Wait ; \\\n    Remove-Item -Force nodejs.msi\nRUN npm install -g bower \\\n\tnpm install -g typescript\n\t\n# Install Visual Studio Build Tools\nENV STUDIOS_INSTALLER_DOWNLOAD_URL https://download.visualstudio.microsoft.com/download/pr/a08183e4-3087-4df5-a074-d3bdf1ad5eb8/20816d670f7909277d9793dc3e80b3c2/vs_buildtools.exe\nRUN Invoke-WebRequest $Env:VSTUDIO_INSTALLER_DOWNLOAD_URL -OutFile vs_buildtools.exe; \\\n\tstart-Process vs_buildtools.exe -ArgumentList '--quiet --norestart --nocache --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.NetCoreBuildTools' -Wait; \\\n    Remove-Item -Force vs_buildtools.exe\n\n\nVOLUME C:/superdump\n\n# Build Super Dump\nENV MSBUILD \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\"\nENV TARGET \"Windows\"\nCMD cd C:/superdump/building; \\\n\tdotnet restore ..\\src; \\\n\t& $Env:MSBUILD msbuild.targets /l:'FileLogger,Microsoft.Build.Engine;logfile=msbuild.log' /target:$Env:TARGET #; \\\n\t#copy '..\\src\\SuperDumpService\\bin\\Release\\netcoreapp3.0\\SuperDumpService.xml' '..\\build\\bin\\SuperDumpService\\SuperDumpService.xml'",
    "raw_stdout_log": "Sending build context to Docker daemon  6.144kB\r\r\nStep 1/22 : FROM mcr.microsoft.com/windows/servercore:1809\n1809: Pulling from windows/servercore",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/Dynatrace/superdump",
    "repo_commit": "319a1e4809c99348b36b67b07537ef4a0024b0b6",
    "repo_id": 80113815
  },
  {
    "raw_dockerfile": "# Compile of registry binaries\nFROM arm32v7/golang as builder\n\nENV DISTRIBUTION_DIR /go/src/github.com/docker/distribution\nENV DOCKER_BUILDTAGS include_oss include_gcs\n\nRUN apt-get update && apt-get install --assume-yes make git\n\nARG VERSION=master\nRUN git clone -b $VERSION https://github.com/docker/distribution.git $DISTRIBUTION_DIR\n\nWORKDIR $DISTRIBUTION_DIR\nRUN mkdir -p /etc/docker/registry && \\\n    cp cmd/registry/config-dev.yml /etc/docker/registry/config.yml\n\nRUN make PREFIX=/go clean binaries\n\n\n# Build a minimal distribution container\nFROM arm32v7/debian:jessie\n\nRUN apt-get update && \\\n    apt-get install -y ca-certificates librados2 apache2-utils && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /go/bin/registry /bin/registry\nCOPY --from=builder /go/src/github.com/docker/distribution/cmd/registry/config-example.yml /etc/docker/registry/config.yml\n\nVOLUME [\"/var/lib/registry\"]\nEXPOSE 5000\nENTRYPOINT [\"/bin/registry\"]\nCMD [\"serve\", \"/etc/docker/registry/config.yml\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  26.41MB\r\r\nStep 1/17 : FROM arm32v7/golang as builder\nlatest: Pulling from arm32v7/golang",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/Budry/docker-registry-arm",
    "repo_commit": "0eae2f40cfabc40cd473d81b8c0157a561f5244b",
    "repo_id": 81728595
  },
  {
    "raw_dockerfile": "FROM microsoft/iis\n\n# install ASP.NET 4.5\nRUN dism /online /enable-feature /all /featurename:IIS-ASPNET45 /NoRestart\n\n# enable windows eventlog\nRUN powershell.exe -command Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application Start 1\n\n# set IIS log fields\nRUN /windows/system32/inetsrv/appcmd.exe set config /section:system.applicationHost/sites /siteDefaults.logFile.logExtFileFlags:\"Date, Time, ClientIP, UserName, SiteName, ServerIP, Method, UriStem, UriQuery, HttpStatus, Win32Status, TimeTaken, ServerPort, UserAgent, Referer, HttpSubStatus\"  /commit:apphost\n\n# deploy webapp\nCOPY publish /inetpub/wwwroot/iis-demo\nRUN /windows/system32/inetsrv/appcmd.exe add app /site.name:\"Default Web Site\" /path:\"/iis-demo\" /physicalPath:\"c:\\inetpub\\wwwroot\\iis-demo\"\n\n# set entrypoint script\nADD SetHostsAndStartMonitoring.cmd \\SetHostsAndStartMonitoring.cmd\nENTRYPOINT [\"C:\\\\SetHostsAndStartMonitoring.cmd\"]\n\n# declare volumes\nVOLUME [\"c:/inetpub/logs/LogFiles\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  49.21MB\r\r\nStep 1/9 : FROM microsoft/iis\nlatest: Pulling from microsoft/iis",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/teddymacn/windows-docker-iis-demo",
    "repo_commit": "47157af316f9ab80eb443325d65c79ba138c211f",
    "repo_id": 85477230
  },
  {
    "raw_dockerfile": "# Inform image from Docker Hub. This image bellow has .Net Framework 3.5 (and 2.0). \r\n# If you want to use only .Net Framework 4.6 then use the option 4.6 in the end of the command. \r\n# This image will depend of windowsservercore\r\nFROM microsoft/dotnet-framework:3.5\r\n\r\n# Replace default shell executed in Dockerfile to Powershell\r\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"]\r\n\r\n# Execute the commands to install IIS Features\r\nRUN Install-WindowsFeature -name Web-Server -IncludeManagementTools ; \\\r\n    Install-WindowsFeature -Name Web-Common-Http -IncludeAllSubFeature ; \\\r\n    Install-WindowsFeature -name Web-Health -IncludeAllSubFeature ; \\\r\n    Install-WindowsFeature -name Web-Health -IncludeAllSubFeature ; \\\r\n    Install-WindowsFeature -Name Web-Performance -IncludeAllSubFeature ; \\\r\n    Install-WindowsFeature -name Web-Security -IncludeAllSubFeature ; \\\r\n    Install-WindowsFeature -name Web-Mgmt-Tools -IncludeAllSubFeature ; \\\r\n    Install-WindowsFeature -name Web-Scripting-Tools -IncludeAllSubFeature ; \\\r\n    Install-WindowsFeature -name Web-App-Dev -IncludeAllSubFeature\r\n\r\n# Enable Registry Key to allow IIS Remote Management\r\nRUN New-ItemProperty -Path HKLM:\\software\\microsoft\\WebManagement\\Server \\\r\n        -Name EnableRemoteManagement -Value 1 -Force\r\n\r\n# Create local user and include on local administrators group\r\nRUN net user fabioh Pa$$w0rd /add ; \\\r\n    net localgroup administrators fabioh /add\r\n\r\n# Restart IIS Services\r\nRUN Restart-Service iisadmin,w3svc,wmsvc\r\n\r\n# Download and install URL Rewrite\r\nRUN New-item c:\\teste -ItemType \"directory\" ; \\\r\n    Invoke-WebRequest https://download.microsoft.com/download/C/9/E/C9E8180D-4E51-40A6-A9BF-776990D8BCA9/rewrite_amd64.msi \\\r\n        -OutFile C:\\teste\\rewrite_amd64.msi ; \\\r\n    msiexec.exe /i c:\\teste\\rewrite_amd64.msi /passive /rd /s /q c:\\install\r\n\r\n# Copy PFX file (located on HOST on C:\\teste) to container and install\r\nADD \"c:\\teste\\certificado.pfx\" \"c:\\teste\\certificado.pfx\"\r\nRUN certutil -importpfx -p \"123456\" \"c:\\teste\\certificado.pfx\"\r\n\r\n# Optional - enable Windows Update on container, \r\n# You can use the script from MSDN and with the name windowsupdate.vbs. \r\n# This step is not required because when you execute the command ===docker run=== \r\n# then a new version is checked from Docker Hub. \r\n# Remove the comment if you want to use these commands\r\n\r\n# RUN Set-Service wuauserv -startupType automatic \r\n# RUN net start wuauserv ADD c:\\teste\\windowsupdate.vbs c:\\teste\\windowsupdate.vbs RUN cscript WindowsUpdate.vbs",
    "raw_stdout_log": "Sending build context to Docker daemon  86.53kB\r\r\nStep 1/9 : FROM microsoft/dotnet-framework:3.5\n3.5: Pulling from microsoft/dotnet-framework",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/fabioharams/container",
    "repo_commit": "e89e15585e0aee6553c5d59b182890378b90d890",
    "repo_id": 89018674
  },
  {
    "raw_dockerfile": "FROM nvidia/cudagl:8.0-devel-ubuntu16.04\n#FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu14.04\nLABEL maintainer andrei.ioan.barsan@gmail.com\n\n# !!! IMPORTANT !!!\n# This does NOT work yet. The dockerization effort is still a work in progress!\n# Running OpenGL GUIs with CUDA in containers is non-trivial.\n\n# Build and run this with 'nvidia-docker'. If you forget to do so, the build\n# will NOT fail, but you will start getting strange issues when attempting\n# to run Caffe or any of the tests.\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    git \\\n    vim \\\n    wget \\\n    libopencv-dev \\\n    libxmu-dev libxi-dev freeglut3 freeglut3-dev glew-utils libglew-dev libglew-dbg\n#        && \\\n#    rm -rf /var/lib/apt/lists/*\n\n# TODO why doesn't DynSLAM pick up the in-tree version of gflags?\nRUN apt-get install -y --no-install-recommends \\\n    binutils-dev  \\\n    libgflags-dev \\\n    libpng++-dev \\\n    libpthread-stubs0-dev\n#    gcc-5 g++-5\n\n# TODO(andrei): Sort out the paths.\nENV DYNSLAM_ROOT=/opt/DynSLAM\nWORKDIR $DYNSLAM_ROOT\n\nADD scripts        ./scripts\nRUN scripts/install_cmake.sh sudo\nRUN cmake --version\n\n# TODO(andrei): It may be useful to make a tutorial about developing a CUDA image processing tool\n# using a GUI with docker.\n\n# TODO(andrei): Add src/DynSLAM separately, LAST, to minimize the number of required rebuilds...\nADD CMakeLists.txt ./\nADD src            ./src\n#ADD data           ./data\n\nRUN mkdir -p build/eigen    && cd build/eigen && cmake $DYNSLAM_ROOT/src/eigen    && make -j$(nproc)\nRUN mkdir -p build/Pangolin && cd build/Pangolin && cmake $DYNSLAM_ROOT/src/Pangolin && make -j$(nproc)\n\n# This has to be provided, since the capabilities test cannot run during Docker build.\nENV ITM_CUDA_COMPUTE_CAPABILITY=52\n\nRUN apt-get install -y --no-install-recommends \\\n    binutils-dev  \\\n    mesa-utils\n\nRUN mkdir -p build/DynSLAM && cd build/DynSLAM && \\\n    cmake $DYNSLAM_ROOT -DCUDA_COMPUTE_CAPABILITY=$ITM_CUDA_COMPUTE_CAPABILITY\n\n# TODO(andrei): Preserve colors!\nRUN cd build/DynSLAM && make -j$(nproc)",
    "raw_stdout_log": "Sending build context to Docker daemon  685.1kB\r\r\nStep 1/17 : FROM nvidia/cudagl:8.0-devel-ubuntu16.04",
    "raw_stderr_log": "manifest for nvidia/cudagl:8.0-devel-ubuntu16.04 not found",
    "html_url": "https://github.com/AndreiBarsan/DynSLAM",
    "repo_commit": "ef3038dfe6e18071ac88611c120fb662f8675db1",
    "repo_id": 91897499
  },
  {
    "raw_dockerfile": "# escape=` (backtick)\n# The above line changes the escape character to the backtick char so that Windows paths don't get mangled.\n\nFROM microsoft/dotnet-framework:4.6.2\n\n# Copy the SDK to the docker image.\nCOPY .\\Photon-OnPremise-Server-SDK_v*\\deploy C:\\PhotonServer\\deploy\n\n# Change the working directory so that the SDK launches correctly.\nWORKDIR C:\\PhotonServer\\deploy\\bin_Win32\\\n\n# default ports exposed by LoadBalancing server.\nEXPOSE 5055 5056 4530 4531 4520 843 943 9090 9091\n\n# run the photon server application.\nENTRYPOINT [\"_run-Photon-as-application.start.cmd\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  58.88kB\r\r\nStep 1/5 : FROM microsoft/dotnet-framework:4.6.2\n4.6.2: Pulling from microsoft/dotnet-framework",
    "raw_stderr_log": "no matching manifest for linux/amd64 in the manifest list entries",
    "html_url": "https://github.com/rossknudsen/PhotonServerDocker",
    "repo_commit": "9337a2bac75468da0018c133389f131a69e9b717",
    "repo_id": 95513426
  }
]