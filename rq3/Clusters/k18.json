[
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.13.5-alpine as builder\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\" \\\n  && $(case ${TARGETPLATFORM:-linux/amd64} in \\\n      \"linux/amd64\")   echo \"GOOS=linux GOARCH=amd64\" > /tmp/.env                       ;; \\\n      \"linux/arm/v6\")  echo \"GOOS=linux GOARCH=arm GOARM=6\" > /tmp/.env                 ;; \\\n      \"linux/arm/v7\")  echo \"GOOS=linux GOARCH=arm GOARM=7\" > /tmp/.env                 ;; \\\n      \"linux/arm64\")   echo \"GOOS=linux GOARCH=arm64\" > /tmp/.env                       ;; \\\n      \"linux/386\")     echo \"GOOS=linux GOARCH=386\" > /tmp/.env                         ;; \\\n      \"linux/ppc64le\") echo \"GOOS=linux GOARCH=ppc64le\" > /tmp/.env                     ;; \\\n      \"linux/s390x\")   echo \"GOOS=linux GOARCH=s390x\" > /tmp/.env                       ;; \\\n      *)               echo \"TARGETPLATFORM ${TARGETPLATFORM} not found...\" && exit 1   ;; \\\n    esac) \\\n  && cat /tmp/.env\nRUN env $(cat /tmp/.env | xargs) go env\n\nRUN apk --update --no-cache add \\\n    build-base \\\n    gcc \\\n    git \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nWORKDIR /app\n\nENV GO111MODULE on\nENV GOPROXY https://goproxy.io\nCOPY go.mod .\nCOPY go.sum .\nRUN env $(cat /tmp/.env | xargs) go mod download\nCOPY . ./\n\nARG VERSION=dev\nRUN env $(cat /tmp/.env | xargs) go build -ldflags \"-w -s -X 'main.version=${VERSION}'\" -v -o ftpgrab cmd/main.go\n\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:latest\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.label-schema.build-date=$BUILD_DATE \\\n  org.label-schema.name=\"ftpgrab\" \\\n  org.label-schema.description=\"Grab your files periodically from a remote FTP or SFTP server easily\" \\\n  org.label-schema.version=$VERSION \\\n  org.label-schema.url=\"https://ftpgrab.github.io\" \\\n  org.label-schema.vcs-ref=$VCS_REF \\\n  org.label-schema.vcs-url=\"https://github.com/ftpgrab/ftpgrab\" \\\n  org.label-schema.vendor=\"FTPGrab\" \\\n  org.label-schema.schema-version=\"1.0\"\n\nRUN apk --update --no-cache add \\\n    ca-certificates \\\n    libressl \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nCOPY --from=builder /app/ftpgrab /usr/local/bin/ftpgrab\nCOPY --from=builder /usr/local/go/lib/time/zoneinfo.zip /usr/local/go/lib/time/zoneinfo.zip\nRUN ftpgrab --version\n\nENV FTPGRAB_DB=\"/db/ftpgrab.db\" \\\n  FTPGRAB_DOWNLOAD_OUTPUT=\"/download\"\n\nVOLUME [ \"/db\", \"/download\" ]\n\nENTRYPOINT [ \"/usr/local/bin/ftpgrab\" ]\nCMD [ \"--config\", \"/ftpgrab.yml\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  108.5kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/ftpgrab/ftpgrab",
    "repo_commit": "8f3a9d1da431e204cacc9be67e8c4834a19082a8",
    "repo_id": 10262188
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:3.10\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\"\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-svn2git-mirror\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-svn2git-mirror\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"svn2git-mirror\" \\\n  org.opencontainers.image.description=\"Mirror SVN repositories to Git periodically\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nRUN apk --update --no-cache add \\\n    cyrus-sasl \\\n    cyrus-sasl-dev \\\n    cyrus-sasl-digestmd5 \\\n    git \\\n    git-perl \\\n    git-svn \\\n    jq \\\n    openssh \\\n    openssh-client \\\n    perl-git-svn \\\n    ruby \\\n    shadow \\\n    subversion \\\n    tzdata \\\n  && gem install specific_install --no-ri --no-rdoc \\\n  && gem specific_install https://github.com/mfherbst/svn2git.git \\\n  #&& gem install svn2git --no-ri --no-rdoc \\\n  && rm -rf /var/cache/apk/* /tmp/*\n\nENV SVN2GIT_MIRROR_PATH=\"/etc/svn2git-mirror\" \\\n  SVN2GIT_MIRROR_CONFIG=\"/etc/svn2git-mirror/config.json\" \\\n  DATA_PATH=\"/data\"\n\nCOPY entrypoint.sh /entrypoint.sh\nCOPY assets /\n\nRUN mkdir -p ${SVN2GIT_MIRROR_PATH} ${DATA_PATH} \\\n  && addgroup -g 1000 svn2git \\\n  && adduser -u 1000 -G svn2git -h /home/svn2git -s /sbin/nologin -D svn2git \\\n  && chmod a+x /entrypoint.sh /usr/local/bin/*\n\nWORKDIR ${DATA_PATH}\nVOLUME [ \"${DATA_PATH}\" ]\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\nCMD [ \"busybox\", \"crond\", \"-f\", \"-L\", \"/dev/stdout\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  17.41kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-svn2git-mirror",
    "repo_commit": "3e79e45ec8412cec1619a7ef54c79536a25ef817",
    "repo_id": 110193170
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} python:2.7-alpine3.10\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\"\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-firefox-syncserver\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-firefox-syncserver\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"Firefox Sync Server\" \\\n  org.opencontainers.image.description=\"Firefox Sync Server\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nENV SYNCSERVER_VERSION=\"1.8.0\" \\\n  SHA1_COMMIT=\"5932c464d70ec9cf0344b1d3e970b3711de6a98e\" \\\n  TZ=\"UTC\" \\\n  PUID=\"1000\" \\\n  PGID=\"1000\"\n\nRUN apk --update --no-cache add \\\n    bash \\\n    curl \\\n    libffi \\\n    libressl \\\n    libstdc++ \\\n    shadow \\\n    su-exec \\\n    tzdata \\\n  && apk --update --no-cache add -t build-dependencies \\\n    build-base \\\n    git \\\n    libffi-dev \\\n    libressl-dev \\\n  && git clone https://github.com/mozilla-services/syncserver app \\\n  && cd app \\\n  && git reset --hard $SHA1_COMMIT \\\n  && pip install pymysql \\\n  && pip install --upgrade --no-cache-dir -r requirements.txt \\\n  && pip install --upgrade --no-cache-dir -r dev-requirements.txt \\\n  && apk del build-dependencies \\\n  && rm -rf /tmp/* /var/cache/apk/* \\\n  && python ./setup.py develop\n\nCOPY entrypoint.sh /entrypoint.sh\n\nRUN chmod a+x /entrypoint.sh \\\n  && mkdir -p /data /opt/syncserver \\\n  && addgroup -g ${PGID} syncserver \\\n  && adduser -u ${PUID} -G syncserver -h /data -s /bin/sh -D syncserver \\\n  && chown -R syncserver. /data /opt/syncserver\n\nEXPOSE 5000\nVOLUME [ \"/data\" ]\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\nCMD [ \"/usr/local/bin/gunicorn\", \"--paste\", \"/opt/syncserver/syncserver.ini\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  10.24kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-firefox-syncserver",
    "repo_commit": "709c3f279504814b03685e14cf93e66db3d160e4",
    "repo_id": 115276490
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.13-alpine as builder\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\" \\\n  && $(case ${TARGETPLATFORM:-linux/amd64} in \\\n      \"linux/amd64\")   echo \"GOOS=linux GOARCH=amd64\" > /tmp/.env                       ;; \\\n      \"linux/arm/v6\")  echo \"GOOS=linux GOARCH=arm GOARM=6\" > /tmp/.env                 ;; \\\n      \"linux/arm/v7\")  echo \"GOOS=linux GOARCH=arm GOARM=7\" > /tmp/.env                 ;; \\\n      \"linux/arm64\")   echo \"GOOS=linux GOARCH=arm64\" > /tmp/.env                       ;; \\\n      \"linux/386\")     echo \"GOOS=linux GOARCH=386\" > /tmp/.env                         ;; \\\n      \"linux/ppc64le\") echo \"GOOS=linux GOARCH=ppc64le\" > /tmp/.env                     ;; \\\n      \"linux/s390x\")   echo \"GOOS=linux GOARCH=s390x\" > /tmp/.env                       ;; \\\n      *)               echo \"TARGETPLATFORM ${TARGETPLATFORM} not found...\" && exit 1   ;; \\\n    esac) \\\n  && cat /tmp/.env\nRUN env $(cat /tmp/.env | xargs) go env\n\nRUN apk --update --no-cache add \\\n    build-base \\\n    gcc \\\n    git \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nWORKDIR /app\n\nENV GO111MODULE on\nENV GOPROXY https://goproxy.io\nCOPY go.mod .\nCOPY go.sum .\nRUN env $(cat /tmp/.env | xargs) go mod download\nCOPY . ./\n\nARG VERSION=dev\nRUN env $(cat /tmp/.env | xargs) go build -ldflags \"-w -s -X 'main.version=${VERSION}'\" -v -o diun cmd/main.go\n\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:latest\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.label-schema.build-date=$BUILD_DATE \\\n  org.label-schema.name=\"Diun\" \\\n  org.label-schema.description=\"Docker image update notifier\" \\\n  org.label-schema.version=$VERSION \\\n  org.label-schema.url=\"https://github.com/crazy-max/diun\" \\\n  org.label-schema.vcs-ref=$VCS_REF \\\n  org.label-schema.vcs-url=\"https://github.com/crazy-max/diun\" \\\n  org.label-schema.vendor=\"CrazyMax\" \\\n  org.label-schema.schema-version=\"1.0\"\n\nRUN apk --update --no-cache add \\\n    ca-certificates \\\n    libressl \\\n    tzdata \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nCOPY --from=builder /app/diun /usr/local/bin/diun\nCOPY --from=builder /usr/local/go/lib/time/zoneinfo.zip /usr/local/go/lib/time/zoneinfo.zip\nRUN diun --version\n\nENV DIUN_DB=\"/data/diun.db\"\n\nVOLUME [ \"/data\" ]\n\nENTRYPOINT [ \"diun\" ]\nCMD [ \"--config\", \"/diun.yml\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  170.5kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/diun",
    "repo_commit": "2893414f598450e8a9c251daad5f4def576a2323",
    "repo_id": 115767098
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} nginx:mainline-alpine\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-matomo\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-matomo\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"Matomo\" \\\n  org.opencontainers.image.description=\"Matomo (formerly Piwik)\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nRUN apk --update --no-cache add -t build-dependencies \\\n    gcc \\\n    gd-dev \\\n    geoip-dev \\\n    git \\\n    gnupg \\\n    libc-dev \\\n    libmaxminddb-dev \\\n    libxslt-dev \\\n    linux-headers \\\n    make \\\n    openssl-dev \\\n    pcre-dev \\\n    perl-dev \\\n    zlib-dev \\\n  && mkdir -p /usr/src /var/lib/nginx/body /var/lib/nginx/fastcgi \\\n  && cd /usr/src \\\n  && wget http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz \\\n  && tar zxvf nginx-$NGINX_VERSION.tar.gz \\\n  && git clone -b master --single-branch https://github.com/leev/ngx_http_geoip2_module.git \\\n  && cd nginx-$NGINX_VERSION \\\n  && ./configure --with-compat --add-dynamic-module=../ngx_http_geoip2_module \\\n  && make modules \\\n  && cp objs/ngx_http_geoip2_module.so /etc/nginx/modules \\\n  && apk del build-dependencies \\\n  && rm -rf /usr/src/nginx-* /usr/src/ngx_http_geoip2_module /var/cache/apk/* /var/www/* /tmp/*\n\nRUN apk --update --no-cache add \\\n    curl \\\n    geoip \\\n    inotify-tools \\\n    libmaxminddb \\\n    php7 \\\n    php7-cli \\\n    php7-ctype \\\n    php7-curl \\\n    php7-dom \\\n    php7-iconv \\\n    php7-fpm \\\n    php7-gd \\\n    php7-json \\\n    php7-ldap \\\n    php7-mbstring \\\n    php7-opcache \\\n    php7-openssl \\\n    php7-pdo \\\n    php7-pdo_mysql \\\n    php7-redis \\\n    php7-session \\\n    php7-simplexml \\\n    php7-xml \\\n    php7-zlib \\\n    ssmtp \\\n    supervisor \\\n    tzdata \\\n    wget \\\n  && rm -rf /var/cache/apk/* /var/www/* /tmp/*\n\nRUN mkdir -p /var/mmdb \\\n  && wget -q https://github.com/crazy-max/docker-matomo/raw/mmdb/GeoLite2-ASN.mmdb -qO /var/mmdb/GeoLite2-ASN.mmdb \\\n  && wget -q https://github.com/crazy-max/docker-matomo/raw/mmdb/GeoLite2-City.mmdb -qO /var/mmdb/GeoLite2-City.mmdb \\\n  && wget -q https://github.com/crazy-max/docker-matomo/raw/mmdb/GeoLite2-Country.mmdb -qO /var/mmdb/GeoLite2-Country.mmdb\n\nENV MATOMO_VERSION=\"3.13.5\" \\\n  CRONTAB_PATH=\"/var/spool/cron/crontabs\" \\\n  TZ=\"UTC\"\n\nRUN apk --update --no-cache add -t build-dependencies \\\n    ca-certificates gnupg libressl tar \\\n  && mkdir -p /var/www \\\n  && cd /tmp \\\n  && wget -q https://builds.matomo.org/piwik-${MATOMO_VERSION}.tar.gz \\\n  && wget -q https://builds.matomo.org/piwik-${MATOMO_VERSION}.tar.gz.asc \\\n  && wget -q https://builds.matomo.org/signature.asc \\\n  && gpg --import signature.asc \\\n  && gpg --verify --batch --no-tty piwik-${MATOMO_VERSION}.tar.gz.asc piwik-${MATOMO_VERSION}.tar.gz \\\n  && tar -xzf piwik-${MATOMO_VERSION}.tar.gz --strip 1 -C /var/www \\\n  && wget -q https://matomo.org/wp-content/uploads/unifont.ttf.zip \\\n  && unzip unifont.ttf.zip -d /var/www/plugins/ImageGraph/fonts/ \\\n  && rm unifont.ttf.zip \\\n  && chown -R nginx. /etc/nginx /usr/lib/nginx /var/cache/nginx /var/lib/nginx /var/log/nginx /var/log/php7 /var/www \\\n  && apk del build-dependencies \\\n  && rm -rf /root/.gnupg /tmp/* /var/cache/apk/*\n\nCOPY entrypoint.sh /entrypoint.sh\nCOPY rootfs /\n\nRUN chmod a+x /entrypoint.sh /usr/local/bin/* \\\n  && chown nginx. /var/www/bootstrap.php\n\nEXPOSE 8000\nWORKDIR /var/www\nVOLUME [ \"/data\" ]\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\nCMD [ \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\" ]\n\nHEALTHCHECK --interval=10s --timeout=5s \\\n  CMD /usr/local/bin/healthcheck",
    "raw_stdout_log": "Sending build context to Docker daemon   47.1kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-matomo",
    "repo_commit": "3fe2195242caec619a58509fd70223f4ab8edcf3",
    "repo_id": 118130706
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} adoptopenjdk:13-jre-hotspot as suexec\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\"\n\nRUN  apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    gcc \\\n    libc-dev \\\n  && curl -o /usr/local/bin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/master/su-exec.c \\\n  && gcc -Wall /usr/local/bin/su-exec.c -o/usr/local/bin/su-exec \\\n  && chown root:root /usr/local/bin/su-exec \\\n  && chmod 0755 /usr/local/bin/su-exec\n\nFROM --platform=${TARGETPLATFORM:-linux/amd64} adoptopenjdk:13-jre-hotspot\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-jetbrains-license-server\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-jetbrains-license-server\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"JetBrains License Server\" \\\n  org.opencontainers.image.description=\"JetBrains License Server\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nENV JLS_PATH=\"/opt/jetbrains-license-server\" \\\n  JLS_VERSION=\"22218\" \\\n  JLS_SHA256=\"f68027a8b2b4f2d9b03fe0b0fef4a9ffc0fdfaf2657ab26d545777973311b601\" \\\n  TZ=\"UTC\" \\\n  PUID=\"1000\" \\\n  PGID=\"1000\"\n\nRUN apt-get update \\\n  && apt-get install -y \\\n    bash \\\n    curl \\\n    zip \\\n    tzdata \\\n  && mkdir -p /data \"$JLS_PATH\" \\\n  && curl -L \"https://download.jetbrains.com/lcsrv/license-server-installer.zip\" -o \"/tmp/jls.zip\" \\\n  && echo \"$JLS_SHA256  /tmp/jls.zip\" | sha256sum -c - | grep OK \\\n  && unzip \"/tmp/jls.zip\" -d \"$JLS_PATH\" \\\n  && rm -f \"/tmp/jls.zip\" \\\n  && chmod a+x \"$JLS_PATH/bin/license-server.sh\" \\\n  && ln -sf \"$JLS_PATH/bin/license-server.sh\" \"/usr/local/bin/license-server\" \\\n  && groupadd -f -g ${PGID} jls \\\n  && useradd -o -s /bin/bash -d /data -u ${PUID} -g jls -m jls \\\n  && chown -R jls. /data \"$JLS_PATH\" \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY --from=suexec /usr/local/bin/su-exec /usr/local/bin/su-exec\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod a+x /entrypoint.sh\n\nEXPOSE 8000\nWORKDIR /data\nVOLUME [ \"/data\" ]\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\nCMD [ \"/usr/local/bin/license-server\", \"run\" ]\n\nHEALTHCHECK --interval=10s --timeout=5s \\\n  CMD license-server status || exit 1",
    "raw_stdout_log": "Sending build context to Docker daemon  11.78kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-jetbrains-license-server",
    "repo_commit": "568e2d961ea09eaa7915108d2d356729fb8dcea7",
    "repo_id": 119823671
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} adoptopenjdk:12-jre-hotspot as suexec\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\"\n\nRUN  apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    gcc \\\n    libc-dev \\\n  && curl -o /usr/local/bin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/master/su-exec.c \\\n  && gcc -Wall /usr/local/bin/su-exec.c -o/usr/local/bin/su-exec \\\n  && chown root:root /usr/local/bin/su-exec \\\n  && chmod 0755 /usr/local/bin/su-exec\n\nFROM --platform=${TARGETPLATFORM:-linux/amd64} adoptopenjdk:12-jre-hotspot\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-ejtserver\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-ejtserver\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"EJT License Server\" \\\n  org.opencontainers.image.description=\"EJT License Server\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nENV TZ=\"UTC\" \\\n  PUID=\"1000\" \\\n  PGID=\"1000\"\n\nCOPY entrypoint.sh /entrypoint.sh\nCOPY --from=suexec /usr/local/bin/su-exec /usr/local/bin/su-exec\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends \\\n    bash \\\n    curl \\\n    tar \\\n    tzdata \\\n  && chmod a+x /entrypoint.sh \\\n  && mkdir -p /data /opt/ejtserver \\\n  && groupadd -f -g ${PGID} ejt \\\n  && useradd -o -s /bin/bash -d /data -u ${PUID} -g ejt -m ejt \\\n  && chown -R ejt. /data /opt/ejtserver \\\n  && ln -sf /opt/ejtserver/bin/admin /usr/local/bin/admin \\\n  && ln -sf /opt/ejtserver/bin/ejtserver /usr/local/bin/ejtserver \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nEXPOSE 11862\nWORKDIR /data\nVOLUME [ \"/data\" ]\n\nENTRYPOINT [ \"/entrypoint.sh\" ]\nCMD [ \"/usr/local/bin/ejtserver\", \"start-launchd\" ]\n\nHEALTHCHECK --interval=10s --timeout=5s \\\n  CMD ejtserver status || exit 1",
    "raw_stdout_log": "Sending build context to Docker daemon  11.26kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-ejtserver",
    "repo_commit": "0dd188fa70a4ec1ff84e37ebacf639d54c4e7c86",
    "repo_id": 120327668
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.13-alpine as builder\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\" \\\n  && $(case ${TARGETPLATFORM:-linux/amd64} in \\\n      \"linux/amd64\")   echo \"GOOS=linux GOARCH=amd64\" > /tmp/.env                       ;; \\\n      \"linux/arm/v6\")  echo \"GOOS=linux GOARCH=arm GOARM=6\" > /tmp/.env                 ;; \\\n      \"linux/arm/v7\")  echo \"GOOS=linux GOARCH=arm GOARM=7\" > /tmp/.env                 ;; \\\n      \"linux/arm64\")   echo \"GOOS=linux GOARCH=arm64\" > /tmp/.env                       ;; \\\n      \"linux/386\")     echo \"GOOS=linux GOARCH=386\" > /tmp/.env                         ;; \\\n      \"linux/ppc64le\") echo \"GOOS=linux GOARCH=ppc64le\" > /tmp/.env                     ;; \\\n      \"linux/s390x\")   echo \"GOOS=linux GOARCH=s390x\" > /tmp/.env                       ;; \\\n      *)               echo \"TARGETPLATFORM ${TARGETPLATFORM} not found...\" && exit 1   ;; \\\n    esac) \\\n  && cat /tmp/.env\nRUN env $(cat /tmp/.env | xargs) go env\n\nRUN apk --update --no-cache add \\\n    build-base \\\n    gcc \\\n    git \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nWORKDIR /app\n\nENV GO111MODULE on\nENV GOPROXY https://goproxy.io\nCOPY go.mod .\nCOPY go.sum .\nRUN env $(cat /tmp/.env | xargs) go mod download\nCOPY . ./\n\nARG VERSION=dev\nRUN env $(cat /tmp/.env | xargs) go build -ldflags \"-w -s -X 'main.version=${VERSION}'\" -v -o swarm-cronjob cmd/main.go\n\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:latest\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/swarm-cronjob\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/swarm-cronjob\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"swarm-cronjob\" \\\n  org.opencontainers.image.description=\"Create jobs on a time-based schedule on Swarm\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nRUN apk --update --no-cache add \\\n    ca-certificates \\\n    libressl \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nCOPY --from=builder /app/swarm-cronjob /usr/local/bin/swarm-cronjob\nCOPY --from=builder /usr/local/go/lib/time/zoneinfo.zip /usr/local/go/lib/time/zoneinfo.zip\nRUN swarm-cronjob --version\n\nENTRYPOINT [ \"swarm-cronjob\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  45.06kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/swarm-cronjob",
    "repo_commit": "b087589ac2d79b2a5660bf3042152c565209a110",
    "repo_id": 161695758
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} golang:1.13-alpine as builder\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\"\n\nENV CLOUDFLARED_VERSION=\"2020.4.0\"\n\nRUN apk --update --no-cache add \\\n    bash \\\n    build-base \\\n    gcc \\\n    git \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nRUN git clone --branch ${CLOUDFLARED_VERSION} https://github.com/cloudflare/cloudflared /go/src/github.com/cloudflare/cloudflared\nWORKDIR /go/src/github.com/cloudflare/cloudflared\nRUN make cloudflared\n\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:latest\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-cloudflared\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-cloudflared\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"Cloudflared\" \\\n  org.opencontainers.image.description=\"Cloudflared proxy-dns\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nENV TZ=\"UTC\" \\\n  TUNNEL_METRICS=\"0.0.0.0:49312\" \\\n  TUNNEL_DNS_ADDRESS=\"0.0.0.0\" \\\n  TUNNEL_DNS_PORT=\"5053\" \\\n  TUNNEL_DNS_UPSTREAM=\"https://1.1.1.1/dns-query,https://1.0.0.1/dns-query\"\n\nRUN apk --update --no-cache add \\\n    bind-tools \\\n    ca-certificates \\\n    libressl \\\n    shadow \\\n    tzdata \\\n  && addgroup -g 1000 cloudflared \\\n  && adduser -u 1000 -G cloudflared -s /sbin/nologin -D cloudflared \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nCOPY --from=builder /go/src/github.com/cloudflare/cloudflared/cloudflared /usr/local/bin/cloudflared\nRUN cloudflared --version\n\nUSER cloudflared\n\nEXPOSE 5053/udp\nEXPOSE 49312/tcp\n\nENTRYPOINT [ \"/usr/local/bin/cloudflared\" ]\nCMD [ \"proxy-dns\" ]\n\nHEALTHCHECK --interval=30s --timeout=20s --start-period=10s \\\n  CMD dig +short @127.0.0.1 -p 5053 cloudflare.com A || exit 1",
    "raw_stdout_log": "Sending build context to Docker daemon  11.78kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-cloudflared",
    "repo_commit": "ae9353ffb03d4a476778d89a6c51b6bdf6ae417e",
    "repo_id": 210601020
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:3.11\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\"\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-flarum\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-flarum\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"Flarum\" \\\n  org.opencontainers.image.description=\"Flarum simple forum\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nRUN apk --update --no-cache add \\\n    bash \\\n    curl \\\n    libgd \\\n    mysql-client \\\n    nginx \\\n    php7 \\\n    php7-cli \\\n    php7-ctype \\\n    php7-curl \\\n    php7-dom \\\n    php7-exif \\\n    php7-fileinfo \\\n    php7-fpm \\\n    php7-gd \\\n    php7-intl \\\n    php7-json \\\n    php7-mbstring \\\n    php7-opcache \\\n    php7-openssl \\\n    php7-pdo \\\n    php7-pdo_mysql \\\n    php7-phar \\\n    php7-session \\\n    php7-simplexml \\\n    php7-tokenizer \\\n    php7-xml \\\n    php7-xmlwriter \\\n    php7-zip \\\n    php7-zlib \\\n    shadow \\\n    su-exec \\\n    tar \\\n    tzdata \\\n  && S6_ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \\\n    \"linux/amd64\")   echo \"amd64\"   ;; \\\n    \"linux/arm/v6\")  echo \"arm\"     ;; \\\n    \"linux/arm/v7\")  echo \"armhf\"   ;; \\\n    \"linux/arm64\")   echo \"aarch64\" ;; \\\n    \"linux/386\")     echo \"x86\"     ;; \\\n    \"linux/ppc64le\") echo \"ppc64le\" ;; \\\n    \"linux/s390x\")   echo \"s390x\"   ;; \\\n    *)               echo \"\"        ;; esac) \\\n  && echo \"S6_ARCH=$S6_ARCH\" \\\n  && wget -q \"https://github.com/just-containers/s6-overlay/releases/latest/download/s6-overlay-${S6_ARCH}.tar.gz\" -qO \"/tmp/s6-overlay-amd64.tar.gz\" \\\n  && tar xzf /tmp/s6-overlay-amd64.tar.gz -C / \\\n  && s6-echo \"s6-overlay installed\" \\\n  && rm -rf /tmp/* /var/cache/apk/* /var/www/*\n\nENV S6_BEHAVIOUR_IF_STAGE2_FAILS=\"2\"\\\n  FLARUM_VERSION=\"v0.1.0-beta.12\" \\\n  TZ=\"UTC\" \\\n  PUID=\"1000\" \\\n  PGID=\"1000\"\n\nRUN mkdir -p /opt/flarum \\\n  && curl -sSL https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n  && COMPOSER_CACHE_DIR=\"/tmp\" composer create-project flarum/flarum /opt/flarum $FLARUM_VERSION --stability=beta \\\n  && composer clear-cache \\\n  && addgroup -g ${PGID} flarum \\\n  && adduser -D -h /opt/flarum -u ${PUID} -G flarum -s /bin/sh -D flarum \\\n  && chown -R flarum. /opt/flarum \\\n  && rm -rf /root/.composer /tmp/*\n\nCOPY rootfs /\n\nRUN chmod +x /usr/local/bin/*\n\nEXPOSE 8000\nWORKDIR /opt/flarum\nVOLUME [ \"/data\" ]\n\nENTRYPOINT [ \"/init\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  31.74kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-flarum",
    "repo_commit": "aee737ef71f99e6e8301853c56489f3e0b9cd4c1",
    "repo_id": 224264785
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:3.10\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\"\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.opencontainers.image.created=$BUILD_DATE \\\n  org.opencontainers.image.url=\"https://github.com/crazy-max/docker-anonaddy\" \\\n  org.opencontainers.image.source=\"https://github.com/crazy-max/docker-anonaddy\" \\\n  org.opencontainers.image.version=$VERSION \\\n  org.opencontainers.image.revision=$VCS_REF \\\n  org.opencontainers.image.vendor=\"CrazyMax\" \\\n  org.opencontainers.image.title=\"AnonAddy\" \\\n  org.opencontainers.image.description=\"AnonAddy - Anonymous Email Forwarding\" \\\n  org.opencontainers.image.licenses=\"MIT\"\n\nRUN apk --update --no-cache add \\\n    bash \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    gpgme \\\n    imagemagick \\\n    libgd \\\n    libressl \\\n    mysql-client \\\n    nginx \\\n    php7 \\\n    php7-cli \\\n    php7-ctype \\\n    php7-curl \\\n    php7-dom \\\n    php7-fileinfo \\\n    php7-fpm \\\n    php7-gd \\\n    php7-iconv \\\n    php7-imagick \\\n    php7-intl \\\n    php7-json \\\n    php7-mailparse \\\n    php7-opcache \\\n    php7-openssl \\\n    php7-pdo \\\n    php7-pdo_mysql \\\n    php7-phar \\\n    php7-session \\\n    php7-simplexml \\\n    php7-tokenizer \\\n    php7-xml \\\n    php7-xmlwriter \\\n    php7-zip \\\n    php7-zlib \\\n    postfix \\\n    postfix-mysql \\\n    shadow \\\n    su-exec \\\n    tar \\\n    tzdata \\\n  && apk --update --no-cache add -t build-dependencies \\\n    autoconf \\\n    automake \\\n    build-base \\\n    gpgme-dev \\\n    libtool \\\n    pcre-dev \\\n    php7-dev \\\n    php7-pear \\\n  && pecl install gnupg \\\n  && S6_ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \\\n    \"linux/amd64\")   echo \"amd64\"   ;; \\\n    \"linux/arm/v6\")  echo \"arm\"     ;; \\\n    \"linux/arm/v7\")  echo \"armhf\"   ;; \\\n    \"linux/arm64\")   echo \"aarch64\" ;; \\\n    \"linux/386\")     echo \"x86\"     ;; \\\n    \"linux/ppc64le\") echo \"ppc64le\" ;; \\\n    \"linux/s390x\")   echo \"s390x\"   ;; \\\n    *)               echo \"\"        ;; esac) \\\n  && echo \"S6_ARCH=$S6_ARCH\" \\\n  && wget -q \"https://github.com/just-containers/s6-overlay/releases/latest/download/s6-overlay-${S6_ARCH}.tar.gz\" -qO \"/tmp/s6-overlay-amd64.tar.gz\" \\\n  && tar xzf /tmp/s6-overlay-amd64.tar.gz -C / \\\n  && s6-echo \"s6-overlay installed\" \\\n  && apk del build-dependencies \\\n  && rm -rf /tmp/* /var/cache/apk/* /var/www/*\n\nENV S6_BEHAVIOUR_IF_STAGE2_FAILS=\"2\"\\\n  ANONADDY_VERSION=\"v0.2.5\" \\\n  TZ=\"UTC\" \\\n  PUID=\"1000\" \\\n  PGID=\"1000\"\n\nRUN apk --update --no-cache add -t build-dependencies \\\n    git \\\n    nodejs \\\n    npm \\\n  && node --version \\\n  && npm -- version \\\n  && mkdir -p /var/www \\\n  && addgroup -g ${PGID} anonaddy \\\n  && adduser -D -h /var/www/anonaddy -u ${PUID} -G anonaddy -s /bin/sh -D anonaddy \\\n  && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n  && git clone --branch ${ANONADDY_VERSION} https://github.com/anonaddy/anonaddy /var/www/anonaddy \\\n  && cd /var/www/anonaddy \\\n  && composer install --optimize-autoloader --no-dev --no-interaction --no-ansi \\\n  && npm config set unsafe-perm true \\\n  && npm install --global cross-env \\\n  && npm install \\\n  && npm run production \\\n  && chown -R anonaddy. /var/www/anonaddy \\\n  && apk del build-dependencies \\\n  && rm -rf /root/.composer /root/.config /root/.npm /var/cache/apk/* /var/www/anonaddy/node_modules /tmp/*\n\nCOPY rootfs /\n\nEXPOSE 2500 8000\nWORKDIR /var/www/anonaddy\nVOLUME [ \"/data\" ]\n\nENTRYPOINT [ \"/init\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon   42.5kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/docker-anonaddy",
    "repo_commit": "864f84511c8d002cd613283c90f76e658a2b9ad8",
    "repo_id": 228188119
  },
  {
    "raw_dockerfile": "# syntax=docker/dockerfile:experimental\nFROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.13.5-alpine as builder\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN printf \"I am running on ${BUILDPLATFORM:-linux/amd64}, building for ${TARGETPLATFORM:-linux/amd64}\\n$(uname -a)\\n\" \\\n  && $(case ${TARGETPLATFORM:-linux/amd64} in \\\n      \"linux/amd64\")   echo \"GOOS=linux GOARCH=amd64\" > /tmp/.env                       ;; \\\n      \"linux/arm/v6\")  echo \"GOOS=linux GOARCH=arm GOARM=6\" > /tmp/.env                 ;; \\\n      \"linux/arm/v7\")  echo \"GOOS=linux GOARCH=arm GOARM=7\" > /tmp/.env                 ;; \\\n      \"linux/arm64\")   echo \"GOOS=linux GOARCH=arm64\" > /tmp/.env                       ;; \\\n      \"linux/386\")     echo \"GOOS=linux GOARCH=386\" > /tmp/.env                         ;; \\\n      \"linux/ppc64le\") echo \"GOOS=linux GOARCH=ppc64le\" > /tmp/.env                     ;; \\\n      \"linux/s390x\")   echo \"GOOS=linux GOARCH=s390x\" > /tmp/.env                       ;; \\\n      *)               echo \"TARGETPLATFORM ${TARGETPLATFORM} not found...\" && exit 1   ;; \\\n    esac) \\\n  && cat /tmp/.env\nRUN env $(cat /tmp/.env | xargs) go env\n\nRUN apk --update --no-cache add \\\n    build-base \\\n    gcc \\\n    git \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nWORKDIR /app\n\nENV GO111MODULE on\nENV GOPROXY https://goproxy.io\nCOPY go.mod .\nCOPY go.sum .\nRUN env $(cat /tmp/.env | xargs) go mod download\nCOPY . ./\n\nARG VERSION=dev\nRUN env $(cat /tmp/.env | xargs) go build -ldflags \"-w -s -X 'main.version=${VERSION}'\" -v -o geoip-updater cmd/main.go\n\nFROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:latest\n\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\n\nLABEL maintainer=\"CrazyMax\" \\\n  org.label-schema.build-date=$BUILD_DATE \\\n  org.label-schema.name=\"geoip-updater\" \\\n  org.label-schema.description=\"Download MaxMind's GeoIP2 databases on a time-based schedule\" \\\n  org.label-schema.version=$VERSION \\\n  org.label-schema.url=\"https://github.com/crazy-max/geoip-updater\" \\\n  org.label-schema.vcs-ref=$VCS_REF \\\n  org.label-schema.vcs-url=\"https://github.com/crazy-max/geoip-updater\" \\\n  org.label-schema.vendor=\"CrazyMax\" \\\n  org.label-schema.schema-version=\"1.0\"\n\nENV EDITION_IDS=\"GeoLite2-ASN,GeoLite2-City,GeoLite2-Country\" \\\n  DOWNLOAD_PATH=\"/data\"\n\nRUN apk --update --no-cache add \\\n    ca-certificates \\\n    libressl \\\n    tzdata \\\n  && rm -rf /tmp/* /var/cache/apk/*\n\nCOPY --from=builder /app/geoip-updater /usr/local/bin/geoip-updater\nCOPY --from=builder /usr/local/go/lib/time/zoneinfo.zip /usr/local/go/lib/time/zoneinfo.zip\nRUN geoip-updater --version\n\nENTRYPOINT [ \"/usr/local/bin/geoip-updater\" ]",
    "raw_stdout_log": "Sending build context to Docker daemon  49.66kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/crazy-max/geoip-updater",
    "repo_commit": "a022b81225f09bfc1f4febff040a8286c7e0cbb9",
    "repo_id": 231272773
  },
  {
    "raw_dockerfile": "FROM --platform=$BUILDPLATFORM golang:1-alpine as builder\n\n# Convert TARGETPLATFORM to GOARCH format\n# https://github.com/tonistiigi/xx\nCOPY --from=tonistiigi/xx:golang / /\n\nARG TARGETPLATFORM\n\nRUN apk add --no-cache musl-dev git gcc\n\nADD . /src\n\nWORKDIR /src\n\nENV GO111MODULE=on\n\nRUN cd cmd/gost && go env && go build -v\n\nFROM alpine:latest\n\nWORKDIR /bin/\n\nCOPY --from=builder /src/cmd/gost/gost .\n\nENTRYPOINT [\"/bin/gost\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  772.1kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 1: Unknown flag: platform",
    "html_url": "https://github.com/ginuerzh/gost",
    "repo_commit": "6e46ac03c7a7104c81fce8196af7cf6edd2b8ca7",
    "repo_id": 32575637
  },
  {
    "raw_dockerfile": "FROM --platform=$BUILDPLATFORM golang:1.13.4-alpine3.10 AS build\nARG TARGETPLATFORM\nWORKDIR /go/src/github.com/robbertkl/docker-ipv6nat\nCOPY . .\nRUN [ \"$TARGETPLATFORM\" = \"linux/amd64\"  ] && echo GOOS=linux GOARCH=amd64 > .env || true\nRUN [ \"$TARGETPLATFORM\" = \"linux/arm64\"  ] && echo GOOS=linux GOARCH=arm64 > .env || true\nRUN [ \"$TARGETPLATFORM\" = \"linux/arm/v6\" ] && echo GOOS=linux GOARCH=arm GOARM=6 > .env || true\nRUN [ \"$TARGETPLATFORM\" = \"linux/arm/v7\" ] && echo GOOS=linux GOARCH=arm GOARM=7 > .env || true\nENV CGO_ENABLED=0\nRUN env $(cat .env | xargs) go build -o /docker-ipv6nat.$(echo \"$TARGETPLATFORM\" | sed -E 's/(^linux|\\/)//g') ./cmd/docker-ipv6nat\n\nFROM alpine:3.10 AS release\nRUN apk add --no-cache ip6tables\nCOPY --from=build /docker-ipv6nat.* /docker-ipv6nat\nCOPY docker-ipv6nat-compat /\nENTRYPOINT [\"/docker-ipv6nat-compat\"]\nCMD [\"--retry\"]",
    "raw_stdout_log": "Sending build context to Docker daemon   59.9kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 1: Unknown flag: platform",
    "html_url": "https://github.com/robbertkl/docker-ipv6nat",
    "repo_commit": "d5639ce5d86ffaeebdf569dc255417c351c0e5fc",
    "repo_id": 58003832
  },
  {
    "raw_dockerfile": "# Builder image with jdk\nFROM --platform=$BUILDPLATFORM maven:3.6-jdk-8 AS build\n\n\nRUN apt-get update \\\n    && apt-get install -y git \\\n    && JOAL_VERSION=\"2.1.20\" \\\n    && git clone https://github.com/anthonyraymond/joal.git --branch \"$JOAL_VERSION\" --depth=1 \\\n    && cd joal \\\n    && mvn --batch-mode --quiet package -DskipTests=true \\\n    && mkdir /artifact \\\n    && mv \"/joal/target/jack-of-all-trades-$JOAL_VERSION.jar\" /artifact/joal.jar \\\n    && apt-get remove -y git \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n# Actual joal image with jre only\nFROM openjdk:8u181-jre\n\nLABEL name=\"joal\"\nLABEL maintainer=\"joal.contact@gmail.com\"\nLABEL url=\"https://github.com/anthonyraymond/joal\"\nLABEL vcs-url=\"https://github.com/anthonyraymond/joal\"\n\nWORKDIR /joal/\n\nCOPY --from=build /artifact/joal.jar /joal/joal.jar\n\nVOLUME /data\n\nENTRYPOINT [\"java\",\"-jar\",\"/joal/joal.jar\"]\nCMD [\"--joal-conf=/data\"]",
    "raw_stdout_log": "Sending build context to Docker daemon  3.584kB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 2: Unknown flag: platform",
    "html_url": "https://github.com/anthonyraymond/joal",
    "repo_commit": "a11f599ca709d5232a0bececa14e9d93ae9b3ee7",
    "repo_id": 82346975
  },
  {
    "raw_dockerfile": "# syntax = docker/dockerfile:1.0-experimental\n\nFROM --platform=$BUILDPLATFORM tonistiigi/xx:golang@sha256:6f7d999551dd471b58f70716754290495690efa8421e0a1fcf18eb11d0c0a537 AS xgo\n\nFROM --platform=$BUILDPLATFORM golang:1.13-buster AS base\nCOPY --from=xgo / /\nWORKDIR /src\nENV GOFLAGS=-mod=vendor\n\nFROM base AS version\nARG CHANNEL\n# TODO: PKG should be inferred from go modules\nRUN --mount=target=. \\ \n  PKG=github.com/moby/buildkit/frontend/dockerfile/cmd/dockerfile-frontend VERSION=$(./frontend/dockerfile/cmd/dockerfile-frontend/hack/detect \"$CHANNEL\") REVISION=$(git rev-parse HEAD)$(if ! git diff --no-ext-diff --quiet --exit-code; then echo .m; fi); \\\n  echo \"-X main.Version=${VERSION} -X main.Revision=${REVISION} -X main.Package=${PKG}\" | tee /tmp/.ldflags; \\\n  echo -n \"${VERSION}\" | tee /tmp/.version;\n\nFROM base AS build\nRUN apt-get update && apt-get --no-install-recommends install -y file\nARG BUILDTAGS=\"\"\nARG TARGETPLATFORM\nENV TARGETPLATFORM=$TARGETPLATFORM\nRUN --mount=target=. --mount=type=cache,target=/root/.cache \\\n  --mount=target=/go/pkg/mod,type=cache \\\n  --mount=source=/tmp/.ldflags,target=/tmp/.ldflags,from=version \\\n  CGO_ENABLED=0 go build -o /dockerfile-frontend -ldflags \"-d $(cat /tmp/.ldflags)\" -tags \"$BUILDTAGS netgo static_build osusergo\" ./frontend/dockerfile/cmd/dockerfile-frontend && \\\n  file /dockerfile-frontend | grep \"statically linked\"\n\nFROM scratch AS release\nLABEL moby.buildkit.frontend.network.none=\"true\"\nCOPY --from=build /dockerfile-frontend /bin/dockerfile-frontend\nENTRYPOINT [\"/bin/dockerfile-frontend\"]\n\n\nFROM base AS buildid-check\nRUN apt-get update && apt-get --no-install-recommends install -y jq\nCOPY /frontend/dockerfile/cmd/dockerfile-frontend/hack/check-daily-outdated .\nCOPY --from=r.j3ss.co/reg /usr/bin/reg /bin\nCOPY --from=build /dockerfile-frontend .\nARG CHANNEL\nARG REPO\nARG DATE\nRUN ./check-daily-outdated $CHANNEL $REPO $DATE /out\n\nFROM scratch AS buildid\nCOPY --from=buildid-check /out/ /\n\nFROM release",
    "raw_stdout_log": "Sending build context to Docker daemon  44.85MB",
    "raw_stderr_log": "Error response from daemon: Dockerfile parse error line 3: Unknown flag: platform",
    "html_url": "https://github.com/moby/buildkit",
    "repo_commit": "99b2abfb76607caa04418c1b097709b3df829287",
    "repo_id": 92969352
  }
]